[
    {
        "reqid": "R.031",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": " Give probability of completing task, and reason behind probability (i.e. how did it calculate it)",
        "comments": "",
        "fulltext": "Robot shall always satisfy calculateTaskCompletionProbability & explain",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "calculateTaskCompletionProbability",
                "explain"
            ],
            "component_name": "Robot",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(calculateTaskCompletionProbability & explain)",
            "responseTextRange": [
                19,
                70
            ],
            "diagramVariables": "Response = <b><i>(calculateTaskCompletionProbability & explain)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(calculateTaskCompletionProbability & explain)",
            "post_condition_unexp_ft": "(calculateTaskCompletionProbability & explain)",
            "post_condition_SMV_pt": "(calculateTaskCompletionProbability & explain)",
            "post_condition_SMV_ft": "(calculateTaskCompletionProbability & explain)",
            "post_condition_coco_smv": "(calculateTaskCompletionProbability & explain)",
            "post_condition_coco": "(calculateTaskCompletionProbability and explain)",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V (calculateTaskCompletionProbability & explain))",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H (calculateTaskCompletionProbability & explain))",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H (calculateTaskCompletionProbability & explain))",
            "ptFinBtwExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(H (calculateTaskCompletionProbability & explain))",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpanded": "(LAST V (calculateTaskCompletionProbability & explain))",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G (calculateTaskCompletionProbability & explain))",
            "ftInfBtwExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(G (calculateTaskCompletionProbability & explain))",
            "ftFinBtwExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "(LAST V (calculateTaskCompletionProbability & explain))",
            "CoCoSpecCode_fetched": "(H($post_condition_coco$))",
            "CoCoSpecCode": "(H((calculateTaskCompletionProbability and explain)))",
            "component": "Robot"
        },
        "_id": "23a0e100-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.043",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": " R3.02 If the robot deviates from the plan, the robot should \\\\ %it{``You could ask it to explain why it's chosen the route it has but I don't think that's a critical thing. I think it's more just the location of where it is and that it's taken the measurements for those locations",
        "comments": "",
        "fulltext": "if planDeviation Robot shall immediately satisfy returnCurrentLocation",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "planDeviation",
                "returnCurrentLocation"
            ],
            "qualifier_word": "if",
            "pre_condition": "(planDeviation)",
            "regular_condition": "(planDeviation)",
            "conditionTextRange": [
                0,
                15
            ],
            "component_name": "Robot",
            "componentTextRange": [
                17,
                21
            ],
            "timingTextRange": [
                29,
                39
            ],
            "post_condition": "(returnCurrentLocation)",
            "responseTextRange": [
                41,
                69
            ],
            "diagramVariables": "TC = <b><i>(planDeviation)</i></b>, Response = <b><i>(returnCurrentLocation)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(planDeviation)</i></b> is true and any point in the interval where <b><i>(planDeviation)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "planDeviation",
            "regular_condition_unexp_ft": "planDeviation",
            "regular_condition_SMV_pt": "planDeviation",
            "regular_condition_SMV_ft": "planDeviation",
            "regular_condition_coco_smv": "planDeviation",
            "regular_condition_coco": "planDeviation",
            "post_condition_unexp_pt": "returnCurrentLocation",
            "post_condition_unexp_ft": "returnCurrentLocation",
            "post_condition_SMV_pt": "returnCurrentLocation",
            "post_condition_SMV_ft": "returnCurrentLocation",
            "post_condition_coco_smv": "returnCurrentLocation",
            "post_condition_coco": "returnCurrentLocation",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
            "ft": "((LAST V (((! planDeviation) & ((! LAST) & (X planDeviation))) -> (X returnCurrentLocation))) & (planDeviation -> returnCurrentLocation))",
            "pt_fetched": "(H (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) -> $post_condition_unexp_pt$))",
            "pt": "(H ((planDeviation & ((Y (! planDeviation)) | FTP)) -> returnCurrentLocation))",
            "ptExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((planDeviation & ((Y (! planDeviation)) | (! (Y TRUE)))) -> returnCurrentLocation))",
            "ptFinBtwExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptFinBtwExpanded": "(H ((planDeviation & ((Y (! planDeviation)) | (! (Y TRUE)))) -> returnCurrentLocation))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "((LAST V (((! planDeviation) & ((! LAST) & (X planDeviation))) -> (X returnCurrentLocation))) & (planDeviation -> returnCurrentLocation))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "((G (((! planDeviation) & (X planDeviation)) -> (X returnCurrentLocation))) & (planDeviation -> returnCurrentLocation))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfBtwExpanded": "((G (((! planDeviation) & (X planDeviation)) -> (X returnCurrentLocation))) & (planDeviation -> returnCurrentLocation))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftFinBtwExpanded": "((LAST V (((! planDeviation) & ((! LAST) & (X planDeviation))) -> (X returnCurrentLocation))) & (planDeviation -> returnCurrentLocation))",
            "CoCoSpecCode_fetched": "(H(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) => $post_condition_coco$))",
            "CoCoSpecCode": "(H((planDeviation and ((YtoPre( not planDeviation)) or FTP)) => returnCurrentLocation))",
            "component": "Robot"
        },
        "_id": "23a0e101-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.032",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "If probability of completing task reduces, explain fall-back alternatives",
        "comments": "",
        "fulltext": "if probabilityTaskCompletion < previousProbabilityTaskCompletion Robot shall immediately satisfy explainAlternatives",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "probabilityTaskCompletion",
                "previousProbabilityTaskCompletion",
                "explainAlternatives"
            ],
            "qualifier_word": "if",
            "pre_condition": "(probabilityTaskCompletion < previousProbabilityTaskCompletion)",
            "regular_condition": "(probabilityTaskCompletion < previousProbabilityTaskCompletion)",
            "conditionTextRange": [
                0,
                63
            ],
            "component_name": "Robot",
            "componentTextRange": [
                65,
                69
            ],
            "timingTextRange": [
                77,
                87
            ],
            "post_condition": "(explainAlternatives)",
            "responseTextRange": [
                89,
                115
            ],
            "diagramVariables": "TC = <b><i>(probabilityTaskCompletion < previousProbabilityTaskCompletion)</i></b>, Response = <b><i>(explainAlternatives)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(probabilityTaskCompletion < previousProbabilityTaskCompletion)</i></b> is true and any point in the interval where <b><i>(probabilityTaskCompletion < previousProbabilityTaskCompletion)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(probabilityTaskCompletion < previousProbabilityTaskCompletion)",
            "regular_condition_unexp_ft": "(probabilityTaskCompletion < previousProbabilityTaskCompletion)",
            "regular_condition_SMV_pt": "(probabilityTaskCompletion < previousProbabilityTaskCompletion)",
            "regular_condition_SMV_ft": "(probabilityTaskCompletion < previousProbabilityTaskCompletion)",
            "regular_condition_coco_smv": "(probabilityTaskCompletion < previousProbabilityTaskCompletion)",
            "regular_condition_coco": "(probabilityTaskCompletion < previousProbabilityTaskCompletion)",
            "post_condition_unexp_pt": "explainAlternatives",
            "post_condition_unexp_ft": "explainAlternatives",
            "post_condition_SMV_pt": "explainAlternatives",
            "post_condition_SMV_ft": "explainAlternatives",
            "post_condition_coco_smv": "explainAlternatives",
            "post_condition_coco": "explainAlternatives",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
            "ft": "((LAST V (((! (probabilityTaskCompletion < previousProbabilityTaskCompletion)) & ((! LAST) & (X (probabilityTaskCompletion < previousProbabilityTaskCompletion)))) -> (X explainAlternatives))) & ((probabilityTaskCompletion < previousProbabilityTaskCompletion) -> explainAlternatives))",
            "pt_fetched": "(H (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) -> $post_condition_unexp_pt$))",
            "pt": "(H (((probabilityTaskCompletion < previousProbabilityTaskCompletion) & ((Y (! (probabilityTaskCompletion < previousProbabilityTaskCompletion))) | FTP)) -> explainAlternatives))",
            "ptExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H (((probabilityTaskCompletion < previousProbabilityTaskCompletion) & ((Y (! (probabilityTaskCompletion < previousProbabilityTaskCompletion))) | (! (Y TRUE)))) -> explainAlternatives))",
            "ptFinBtwExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptFinBtwExpanded": "(H (((probabilityTaskCompletion < previousProbabilityTaskCompletion) & ((Y (! (probabilityTaskCompletion < previousProbabilityTaskCompletion))) | (! (Y TRUE)))) -> explainAlternatives))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "((LAST V (((! (probabilityTaskCompletion < previousProbabilityTaskCompletion)) & ((! LAST) & (X (probabilityTaskCompletion < previousProbabilityTaskCompletion)))) -> (X explainAlternatives))) & ((probabilityTaskCompletion < previousProbabilityTaskCompletion) -> explainAlternatives))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "((G (((! (probabilityTaskCompletion < previousProbabilityTaskCompletion)) & (X (probabilityTaskCompletion < previousProbabilityTaskCompletion))) -> (X explainAlternatives))) & ((probabilityTaskCompletion < previousProbabilityTaskCompletion) -> explainAlternatives))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfBtwExpanded": "((G (((! (probabilityTaskCompletion < previousProbabilityTaskCompletion)) & (X (probabilityTaskCompletion < previousProbabilityTaskCompletion))) -> (X explainAlternatives))) & ((probabilityTaskCompletion < previousProbabilityTaskCompletion) -> explainAlternatives))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftFinBtwExpanded": "((LAST V (((! (probabilityTaskCompletion < previousProbabilityTaskCompletion)) & ((! LAST) & (X (probabilityTaskCompletion < previousProbabilityTaskCompletion)))) -> (X explainAlternatives))) & ((probabilityTaskCompletion < previousProbabilityTaskCompletion) -> explainAlternatives))",
            "CoCoSpecCode_fetched": "(H(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) => $post_condition_coco$))",
            "CoCoSpecCode": "(H(((probabilityTaskCompletion < previousProbabilityTaskCompletion) and ((YtoPre( not (probabilityTaskCompletion < previousProbabilityTaskCompletion))) or FTP)) => explainAlternatives))",
            "component": "Robot"
        },
        "_id": "23a0e102-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.035",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "(R1.01) When the system detects a route change, the autonomous system should explain why the route has changed before it continues",
        "comments": "",
        "fulltext": "Robot  shall  before go  satisfy  explain",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "go",
                "explain"
            ],
            "component_name": "Robot",
            "componentTextRange": [
                0,
                4
            ],
            "stop_condition": "(go)",
            "timingTextRange": [
                14,
                22
            ],
            "post_condition": "(explain)",
            "responseTextRange": [
                25,
                40
            ],
            "diagramVariables": "SC = <b><i>(go)</i></b>, Response = <b><i>(explain)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisified.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "explain",
            "post_condition_unexp_ft": "explain",
            "post_condition_SMV_pt": "explain",
            "post_condition_SMV_ft": "explain",
            "post_condition_coco_smv": "explain",
            "post_condition_coco": "explain",
            "stop_condition_unexp_pt": "go",
            "stop_condition_unexp_ft": "go",
            "stop_condition_SMV_pt": "go",
            "stop_condition_SMV_ft": "go",
            "stop_condition_coco_smv": "go",
            "stop_condition_coco": "go",
            "ft_fetched": "(($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))",
            "ft": "((explain | LAST) V (! go))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((! FTP) & (Y (O $post_condition_unexp_pt$)))))",
            "pt": "(H (go -> ((! FTP) & (Y (O explain)))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((Y TRUE) & (Y (O $post_condition_SMV_pt$)))))",
            "ptExpanded": "(H (go -> (Y (O explain))))",
            "ptFinBtwExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((Y TRUE) & (Y (O $post_condition_SMV_pt$)))))",
            "ptFinBtwExpanded": "(H (go -> ((Y TRUE) & (Y (O explain)))))",
            "ftExpanded_fetched": "(($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))",
            "ftExpanded": "((explain | LAST) V (! go))",
            "ftInfAUExpanded_fetched": "($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))",
            "ftInfAUExpanded": "(explain V (! go))",
            "ftInfBtwExpanded_fetched": "($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))",
            "ftInfBtwExpanded": "(explain V (! go))",
            "ftFinBtwExpanded_fetched": "(($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))",
            "ftFinBtwExpanded": "((explain | LAST) V (! go))",
            "CoCoSpecCode_fetched": "(H($stop_condition_coco$ => (( not FTP) and (YtoPre(O($post_condition_coco$))))))",
            "CoCoSpecCode": "(H(go => (( not FTP) and (YtoPre(O(explain))))))",
            "component": "Robot"
        },
        "_id": "23a0e103-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.015",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "In time-critical situations the explanation should be direct and as concise as possible",
        "comments": "",
        "fulltext": "when timeCritical Explanation shall immediately satisfy concise",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "timeCritical",
                "concise"
            ],
            "qualifier_word": "when",
            "pre_condition": "(timeCritical)",
            "regular_condition": "(timeCritical)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "Explanation",
            "componentTextRange": [
                18,
                28
            ],
            "timingTextRange": [
                36,
                46
            ],
            "post_condition": "(concise)",
            "responseTextRange": [
                48,
                62
            ],
            "diagramVariables": "TC = <b><i>(timeCritical)</i></b>, Response = <b><i>(concise)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(timeCritical)</i></b> is true and any point in the interval where <b><i>(timeCritical)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "timeCritical",
            "regular_condition_unexp_ft": "timeCritical",
            "regular_condition_SMV_pt": "timeCritical",
            "regular_condition_SMV_ft": "timeCritical",
            "regular_condition_coco_smv": "timeCritical",
            "regular_condition_coco": "timeCritical",
            "post_condition_unexp_pt": "concise",
            "post_condition_unexp_ft": "concise",
            "post_condition_SMV_pt": "concise",
            "post_condition_SMV_ft": "concise",
            "post_condition_coco_smv": "concise",
            "post_condition_coco": "concise",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
            "ft": "((LAST V (((! timeCritical) & ((! LAST) & (X timeCritical))) -> (X concise))) & (timeCritical -> concise))",
            "pt_fetched": "(H (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) -> $post_condition_unexp_pt$))",
            "pt": "(H ((timeCritical & ((Y (! timeCritical)) | FTP)) -> concise))",
            "ptExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((timeCritical & ((Y (! timeCritical)) | (! (Y TRUE)))) -> concise))",
            "ptFinBtwExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptFinBtwExpanded": "(H ((timeCritical & ((Y (! timeCritical)) | (! (Y TRUE)))) -> concise))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "((LAST V (((! timeCritical) & ((! LAST) & (X timeCritical))) -> (X concise))) & (timeCritical -> concise))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "((G (((! timeCritical) & (X timeCritical)) -> (X concise))) & (timeCritical -> concise))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfBtwExpanded": "((G (((! timeCritical) & (X timeCritical)) -> (X concise))) & (timeCritical -> concise))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftFinBtwExpanded": "((LAST V (((! timeCritical) & ((! LAST) & (X timeCritical))) -> (X concise))) & (timeCritical -> concise))",
            "CoCoSpecCode_fetched": "(H(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) => $post_condition_coco$))",
            "CoCoSpecCode": "(H((timeCritical and ((YtoPre( not timeCritical)) or FTP)) => concise))",
            "component": "Explanation"
        },
        "_id": "23a0e104-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.012",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "",
        "comments": "",
        "fulltext": "Explanation shall always satisfy Factual",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Factual"
            ],
            "component_name": "Explanation",
            "componentTextRange": [
                0,
                10
            ],
            "timingTextRange": [
                18,
                23
            ],
            "post_condition": "(Factual)",
            "responseTextRange": [
                25,
                39
            ],
            "diagramVariables": "Response = <b><i>(Factual)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "Factual",
            "post_condition_unexp_ft": "Factual",
            "post_condition_SMV_pt": "Factual",
            "post_condition_SMV_ft": "Factual",
            "post_condition_coco_smv": "Factual",
            "post_condition_coco": "Factual",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V Factual)",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H Factual)",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H Factual)",
            "ptFinBtwExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(H Factual)",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpanded": "(LAST V Factual)",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G Factual)",
            "ftInfBtwExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(G Factual)",
            "ftFinBtwExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "(LAST V Factual)",
            "CoCoSpecCode_fetched": "(H($post_condition_coco$))",
            "CoCoSpecCode": "(H(Factual))",
            "component": "Explanation"
        },
        "_id": "23a0e105-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.016",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "In training situations, the explanation should be detailed and contain all information ",
        "comments": "",
        "fulltext": "in trainingMode Explanation shall always satisfy detailed",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "trainingMode",
                "detailed"
            ],
            "scope_mode": "trainingMode",
            "scopeTextRange": [
                0,
                14
            ],
            "component_name": "Explanation",
            "componentTextRange": [
                16,
                26
            ],
            "timingTextRange": [
                34,
                39
            ],
            "post_condition": "(detailed)",
            "responseTextRange": [
                41,
                56
            ],
            "diagramVariables": "M = <b><i>trainingMode</i></b>,, Response = <b><i>(detailed)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>trainingMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "trainingMode",
            "scope_mode_coco": "trainingMode",
            "scope_mode_ft": "trainingMode",
            "post_condition_unexp_pt": "detailed",
            "post_condition_unexp_ft": "detailed",
            "post_condition_SMV_pt": "detailed",
            "post_condition_SMV_ft": "detailed",
            "post_condition_coco_smv": "detailed",
            "post_condition_coco": "detailed",
            "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V (trainingMode -> detailed))",
            "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H (trainingMode -> detailed))",
            "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H (trainingMode -> detailed))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ($post_condition_SMV_pt$ S ($post_condition_SMV_pt$ & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! trainingMode) & (Y trainingMode)) -> (Y (detailed S (detailed & (trainingMode & ((! (Y TRUE)) | (Y (! trainingMode)))))))))",
            "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "(LAST V (trainingMode -> detailed))",
            "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G (trainingMode -> detailed))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! trainingMode) ) & (X trainingMode))) | (X ((F ((trainingMode ) & (X (! trainingMode)))) -> (((trainingMode ) & (X (! trainingMode))) V detailed))))) & (trainingMode -> ((F ((trainingMode ) & (X (! trainingMode)))) -> (((trainingMode ) & (X (! trainingMode))) V detailed))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! trainingMode) & (! LAST)) & (X trainingMode)) & (! LAST))) | (X (((! LAST) U ((trainingMode & (! LAST)) & (X (! trainingMode)))) -> (((trainingMode & (! LAST)) & (X (! trainingMode))) V detailed))))) & (trainingMode -> (((! LAST) U ((trainingMode & (! LAST)) & (X (! trainingMode)))) -> (((trainingMode & (! LAST)) & (X (! trainingMode))) V detailed))))",
            "CoCoSpecCode_fetched": "(H($scope_mode_coco$ => $post_condition_coco$))",
            "CoCoSpecCode": "(H(trainingMode => detailed))",
            "component": "Explanation"
        },
        "_id": "23a0e106-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.044",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "R3.03 ``I'd want to know what path it was taking or intended to take so I could make sure it was still following that path. Or if it would follow that path and it won’t deviate unexpectedly\"",
        "comments": "",
        "fulltext": "Robot shall always satisfy (explainCurrentPath => returnCurrentPath) & (explainIntendedPath => returnIntendedPath) & followPath & noDeviations",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "explainCurrentPath",
                "returnCurrentPath",
                "explainIntendedPath",
                "returnIntendedPath",
                "followPath",
                "noDeviations"
            ],
            "component_name": "Robot",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(( explainCurrentPath => returnCurrentPath ) & ( explainIntendedPath => returnIntendedPath ) & followPath & noDeviations)",
            "responseTextRange": [
                19,
                141
            ],
            "diagramVariables": "Response = <b><i>(( explainCurrentPath => returnCurrentPath ) & ( explainIntendedPath => returnIntendedPath ) & followPath & noDeviations)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((((explainCurrentPath -> returnCurrentPath) & (explainIntendedPath -> returnIntendedPath)) & followPath) & noDeviations)",
            "post_condition_unexp_ft": "((((explainCurrentPath -> returnCurrentPath) & (explainIntendedPath -> returnIntendedPath)) & followPath) & noDeviations)",
            "post_condition_SMV_pt": "((((explainCurrentPath -> returnCurrentPath) & (explainIntendedPath -> returnIntendedPath)) & followPath) & noDeviations)",
            "post_condition_SMV_ft": "((((explainCurrentPath -> returnCurrentPath) & (explainIntendedPath -> returnIntendedPath)) & followPath) & noDeviations)",
            "post_condition_coco_smv": "((((explainCurrentPath -> returnCurrentPath) & (explainIntendedPath -> returnIntendedPath)) & followPath) & noDeviations)",
            "post_condition_coco": "((((explainCurrentPath => returnCurrentPath) and (explainIntendedPath => returnIntendedPath)) and followPath) and noDeviations)",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V ((((explainCurrentPath -> returnCurrentPath) & (explainIntendedPath -> returnIntendedPath)) & followPath) & noDeviations))",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H ((((explainCurrentPath -> returnCurrentPath) & (explainIntendedPath -> returnIntendedPath)) & followPath) & noDeviations))",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H ((((explainCurrentPath -> returnCurrentPath) & (explainIntendedPath -> returnIntendedPath)) & followPath) & noDeviations))",
            "ptFinBtwExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(H ((((explainCurrentPath -> returnCurrentPath) & (explainIntendedPath -> returnIntendedPath)) & followPath) & noDeviations))",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpanded": "(LAST V ((((explainCurrentPath -> returnCurrentPath) & (explainIntendedPath -> returnIntendedPath)) & followPath) & noDeviations))",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G ((((explainCurrentPath -> returnCurrentPath) & (explainIntendedPath -> returnIntendedPath)) & followPath) & noDeviations))",
            "ftInfBtwExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(G ((((explainCurrentPath -> returnCurrentPath) & (explainIntendedPath -> returnIntendedPath)) & followPath) & noDeviations))",
            "ftFinBtwExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "(LAST V ((((explainCurrentPath -> returnCurrentPath) & (explainIntendedPath -> returnIntendedPath)) & followPath) & noDeviations))",
            "CoCoSpecCode_fetched": "(H($post_condition_coco$))",
            "CoCoSpecCode": "(H(((((explainCurrentPath => returnCurrentPath) and (explainIntendedPath => returnIntendedPath)) and followPath) and noDeviations)))",
            "component": "Robot"
        },
        "_id": "23a0e107-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.033",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "If task is aborted part way through, explain how situation is left safe",
        "comments": "",
        "fulltext": "if taskAbort Robot shall immediately satisfy explainFailSafe",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "taskAbort",
                "explainFailSafe"
            ],
            "qualifier_word": "if",
            "pre_condition": "(taskAbort)",
            "regular_condition": "(taskAbort)",
            "conditionTextRange": [
                0,
                11
            ],
            "component_name": "Robot",
            "componentTextRange": [
                13,
                17
            ],
            "timingTextRange": [
                25,
                35
            ],
            "post_condition": "(explainFailSafe)",
            "responseTextRange": [
                37,
                59
            ],
            "diagramVariables": "TC = <b><i>(taskAbort)</i></b>, Response = <b><i>(explainFailSafe)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(taskAbort)</i></b> is true and any point in the interval where <b><i>(taskAbort)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "taskAbort",
            "regular_condition_unexp_ft": "taskAbort",
            "regular_condition_SMV_pt": "taskAbort",
            "regular_condition_SMV_ft": "taskAbort",
            "regular_condition_coco_smv": "taskAbort",
            "regular_condition_coco": "taskAbort",
            "post_condition_unexp_pt": "explainFailSafe",
            "post_condition_unexp_ft": "explainFailSafe",
            "post_condition_SMV_pt": "explainFailSafe",
            "post_condition_SMV_ft": "explainFailSafe",
            "post_condition_coco_smv": "explainFailSafe",
            "post_condition_coco": "explainFailSafe",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
            "ft": "((LAST V (((! taskAbort) & ((! LAST) & (X taskAbort))) -> (X explainFailSafe))) & (taskAbort -> explainFailSafe))",
            "pt_fetched": "(H (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) -> $post_condition_unexp_pt$))",
            "pt": "(H ((taskAbort & ((Y (! taskAbort)) | FTP)) -> explainFailSafe))",
            "ptExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((taskAbort & ((Y (! taskAbort)) | (! (Y TRUE)))) -> explainFailSafe))",
            "ptFinBtwExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptFinBtwExpanded": "(H ((taskAbort & ((Y (! taskAbort)) | (! (Y TRUE)))) -> explainFailSafe))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "((LAST V (((! taskAbort) & ((! LAST) & (X taskAbort))) -> (X explainFailSafe))) & (taskAbort -> explainFailSafe))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "((G (((! taskAbort) & (X taskAbort)) -> (X explainFailSafe))) & (taskAbort -> explainFailSafe))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfBtwExpanded": "((G (((! taskAbort) & (X taskAbort)) -> (X explainFailSafe))) & (taskAbort -> explainFailSafe))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftFinBtwExpanded": "((LAST V (((! taskAbort) & ((! LAST) & (X taskAbort))) -> (X explainFailSafe))) & (taskAbort -> explainFailSafe))",
            "CoCoSpecCode_fetched": "(H(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) => $post_condition_coco$))",
            "CoCoSpecCode": "(H((taskAbort and ((YtoPre( not taskAbort)) or FTP)) => explainFailSafe))",
            "component": "Robot"
        },
        "_id": "23a0e108-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.009",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "The robot should explain why it put an object in a specific location ",
        "comments": "",
        "fulltext": "in manipulationMode if objectPlaced Robot shall at the next timepoint satisfy explainObjectLocation",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "manipulationMode",
                "objectPlaced",
                "explainObjectLocation"
            ],
            "scope_mode": "manipulationMode",
            "scopeTextRange": [
                0,
                18
            ],
            "qualifier_word": "if",
            "pre_condition": "(objectPlaced)",
            "regular_condition": "(objectPlaced)",
            "conditionTextRange": [
                20,
                34
            ],
            "component_name": "Robot",
            "componentTextRange": [
                36,
                40
            ],
            "timingTextRange": [
                48,
                68
            ],
            "post_condition": "(explainObjectLocation)",
            "responseTextRange": [
                70,
                98
            ],
            "diagramVariables": "M = <b><i>manipulationMode</i></b>,, TC = <b><i>(objectPlaced)</i></b>, Response = <b><i>(explainObjectLocation)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>manipulationMode</i></b> holds.\nTRIGGER: first point in the interval if <b><i>(objectPlaced)</i></b> is true and any point in the interval where <b><i>(objectPlaced)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_regular_next_satisfaction.svg",
            "scope_mode_pt": "manipulationMode",
            "scope_mode_coco": "manipulationMode",
            "scope_mode_ft": "manipulationMode",
            "regular_condition_unexp_pt": "objectPlaced",
            "regular_condition_unexp_ft": "objectPlaced",
            "regular_condition_SMV_pt": "objectPlaced",
            "regular_condition_SMV_ft": "objectPlaced",
            "regular_condition_coco_smv": "objectPlaced",
            "regular_condition_coco": "objectPlaced",
            "post_condition_unexp_pt": "explainObjectLocation",
            "post_condition_unexp_ft": "explainObjectLocation",
            "post_condition_SMV_pt": "explainObjectLocation",
            "post_condition_SMV_ft": "explainObjectLocation",
            "post_condition_coco_smv": "explainObjectLocation",
            "post_condition_coco": "explainObjectLocation",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))))) & ($scope_mode_ft$ -> (((Lin_$scope_mode_ft$ | LAST) V (((! $regular_condition_unexp_ft$) & ((! LAST) & ((X $regular_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) -> ((X ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))) & (! (Lin_$scope_mode_ft$ | LAST))))) & ($regular_condition_unexp_ft$ -> ((Lin_$scope_mode_ft$ | LAST) | ((X $post_condition_unexp_ft$) & (! (Lin_$scope_mode_ft$ | LAST))))))))",
            "ft": "((LAST V ((! (Fin_manipulationMode & (! LAST))) | (X (((Lin_manipulationMode | LAST) V (((! objectPlaced) & ((! LAST) & ((X objectPlaced) & (! (Lin_manipulationMode | LAST))))) -> ((X ((Lin_manipulationMode | LAST) | ((X explainObjectLocation) & (! (Lin_manipulationMode | LAST))))) & (! (Lin_manipulationMode | LAST))))) & (objectPlaced -> ((Lin_manipulationMode | LAST) | ((X explainObjectLocation) & (! (Lin_manipulationMode | LAST))))))))) & (manipulationMode -> (((Lin_manipulationMode | LAST) V (((! objectPlaced) & ((! LAST) & ((X objectPlaced) & (! (Lin_manipulationMode | LAST))))) -> ((X ((Lin_manipulationMode | LAST) | ((X explainObjectLocation) & (! (Lin_manipulationMode | LAST))))) & (! (Lin_manipulationMode | LAST))))) & (objectPlaced -> ((Lin_manipulationMode | LAST) | ((X explainObjectLocation) & (! (Lin_manipulationMode | LAST))))))))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> ($post_condition_unexp_pt$ | Fin_$scope_mode_pt$)) S (((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> ($post_condition_unexp_pt$ | Fin_$scope_mode_pt$)) & Fin_$scope_mode_pt$))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> ($post_condition_unexp_pt$ | Fin_$scope_mode_pt$)) S (((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | Fin_$scope_mode_pt$))) -> ($post_condition_unexp_pt$ | Fin_$scope_mode_pt$)) & Fin_$scope_mode_pt$))))",
            "pt": "((H (Lin_manipulationMode -> (Y (((Y (objectPlaced & ((Y (! objectPlaced)) | Fin_manipulationMode))) -> (explainObjectLocation | Fin_manipulationMode)) S (((Y (objectPlaced & ((Y (! objectPlaced)) | Fin_manipulationMode))) -> (explainObjectLocation | Fin_manipulationMode)) & Fin_manipulationMode))))) & (((! Lin_manipulationMode) S ((! Lin_manipulationMode) & Fin_manipulationMode)) -> (((Y (objectPlaced & ((Y (! objectPlaced)) | Fin_manipulationMode))) -> (explainObjectLocation | Fin_manipulationMode)) S (((Y (objectPlaced & ((Y (! objectPlaced)) | Fin_manipulationMode))) -> (explainObjectLocation | Fin_manipulationMode)) & Fin_manipulationMode))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> ($post_condition_SMV_pt$ | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) S (((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> ($post_condition_SMV_pt$ | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> ($post_condition_SMV_pt$ | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) S (((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> ($post_condition_SMV_pt$ | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))",
            "ptExpanded": "((H (((! manipulationMode) & (Y manipulationMode)) -> (Y (((Y (objectPlaced & ((Y (! objectPlaced)) | (manipulationMode & (Z (! manipulationMode)))))) -> (explainObjectLocation | (manipulationMode & (Z (! manipulationMode))))) S (((Y (objectPlaced & ((Y (! objectPlaced)) | (manipulationMode & (Z (! manipulationMode)))))) -> (explainObjectLocation | (manipulationMode & (Z (! manipulationMode))))) & (manipulationMode & (Z (! manipulationMode)))))))) & (((! ((! manipulationMode) & (Y manipulationMode))) S ((! ((! manipulationMode) & (Y manipulationMode))) & (manipulationMode & (Z (! manipulationMode))))) -> (((Y (objectPlaced & ((Y (! objectPlaced)) | (manipulationMode & (Z (! manipulationMode)))))) -> (explainObjectLocation | (manipulationMode & (Z (! manipulationMode))))) S (((Y (objectPlaced & ((Y (! objectPlaced)) | (manipulationMode & (Z (! manipulationMode)))))) -> (explainObjectLocation | (manipulationMode & (Z (! manipulationMode))))) & (manipulationMode & (Z (! manipulationMode)))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> ($post_condition_SMV_pt$ | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) S (((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))) -> ($post_condition_SMV_pt$ | ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! manipulationMode) & (Y manipulationMode)) -> (Y (((Y (objectPlaced & ((Y (! objectPlaced)) | (manipulationMode & ((! (Y TRUE)) | (Y (! manipulationMode))))))) -> (explainObjectLocation | (manipulationMode & ((! (Y TRUE)) | (Y (! manipulationMode)))))) S (((Y (objectPlaced & ((Y (! objectPlaced)) | (manipulationMode & ((! (Y TRUE)) | (Y (! manipulationMode))))))) -> (explainObjectLocation | (manipulationMode & ((! (Y TRUE)) | (Y (! manipulationMode)))))) & (manipulationMode & ((! (Y TRUE)) | (Y (! manipulationMode)))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))))) & ($scope_mode_ft$ -> ((((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) -> ((X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))) & ($regular_condition_SMV_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST) | ((X $post_condition_SMV_ft$) & (! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST))))))))",
            "ftExpanded": "((LAST V ((! ((((! manipulationMode) & (! LAST)) & (X manipulationMode)) & (! LAST))) | (X (((((manipulationMode & (! LAST)) & (X (! manipulationMode))) | LAST) V (((! objectPlaced) & ((! LAST) & ((X objectPlaced) & (! (((manipulationMode & (! LAST)) & (X (! manipulationMode))) | LAST))))) -> ((X ((((manipulationMode & (! LAST)) & (X (! manipulationMode))) | LAST) | ((X explainObjectLocation) & (! (((manipulationMode & (! LAST)) & (X (! manipulationMode))) | LAST))))) & (! (((manipulationMode & (! LAST)) & (X (! manipulationMode))) | LAST))))) & (objectPlaced -> ((((manipulationMode & (! LAST)) & (X (! manipulationMode))) | LAST) | ((X explainObjectLocation) & (! (((manipulationMode & (! LAST)) & (X (! manipulationMode))) | LAST))))))))) & (manipulationMode -> (((((manipulationMode & (! LAST)) & (X (! manipulationMode))) | LAST) V (((! objectPlaced) & ((! LAST) & ((X objectPlaced) & (! (((manipulationMode & (! LAST)) & (X (! manipulationMode))) | LAST))))) -> ((X ((((manipulationMode & (! LAST)) & (X (! manipulationMode))) | LAST) | ((X explainObjectLocation) & (! (((manipulationMode & (! LAST)) & (X (! manipulationMode))) | LAST))))) & (! (((manipulationMode & (! LAST)) & (X (! manipulationMode))) | LAST))))) & (objectPlaced -> ((((manipulationMode & (! LAST)) & (X (! manipulationMode))) | LAST) | ((X explainObjectLocation) & (! (((manipulationMode & (! LAST)) & (X (! manipulationMode))) | LAST))))))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))))) & ($scope_mode_ft$ -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))))))",
            "ftInfAUExpanded": "((G ((! (((! manipulationMode) ) & (X manipulationMode))) | (X ((((manipulationMode ) & (X (! manipulationMode))) V (((! objectPlaced) & ((X objectPlaced) & (! ((manipulationMode ) & (X (! manipulationMode)))))) -> ((X (((manipulationMode ) & (X (! manipulationMode))) | ((X explainObjectLocation) & (! ((manipulationMode ) & (X (! manipulationMode))))))) & (! ((manipulationMode ) & (X (! manipulationMode))))))) & (objectPlaced -> (((manipulationMode ) & (X (! manipulationMode))) | ((X explainObjectLocation) & (! ((manipulationMode ) & (X (! manipulationMode))))))))))) & (manipulationMode -> ((((manipulationMode ) & (X (! manipulationMode))) V (((! objectPlaced) & ((X objectPlaced) & (! ((manipulationMode ) & (X (! manipulationMode)))))) -> ((X (((manipulationMode ) & (X (! manipulationMode))) | ((X explainObjectLocation) & (! ((manipulationMode ) & (X (! manipulationMode))))))) & (! ((manipulationMode ) & (X (! manipulationMode))))))) & (objectPlaced -> (((manipulationMode ) & (X (! manipulationMode))) | ((X explainObjectLocation) & (! ((manipulationMode ) & (X (! manipulationMode))))))))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))))))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))) -> ((X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))))))))",
            "ftInfBtwExpanded": "((G ((! (((! manipulationMode) ) & (X manipulationMode))) | (X ((F ((manipulationMode ) & (X (! manipulationMode)))) -> ((((manipulationMode ) & (X (! manipulationMode))) V (((! objectPlaced) & ((X objectPlaced) & (! ((manipulationMode ) & (X (! manipulationMode)))))) -> ((X (((manipulationMode ) & (X (! manipulationMode))) | ((X explainObjectLocation) & (! ((manipulationMode ) & (X (! manipulationMode))))))) & (! ((manipulationMode ) & (X (! manipulationMode))))))) & (objectPlaced -> (((manipulationMode ) & (X (! manipulationMode))) | ((X explainObjectLocation) & (! ((manipulationMode ) & (X (! manipulationMode)))))))))))) & (manipulationMode -> ((F ((manipulationMode ) & (X (! manipulationMode)))) -> ((((manipulationMode ) & (X (! manipulationMode))) V (((! objectPlaced) & ((X objectPlaced) & (! ((manipulationMode ) & (X (! manipulationMode)))))) -> ((X (((manipulationMode ) & (X (! manipulationMode))) | ((X explainObjectLocation) & (! ((manipulationMode ) & (X (! manipulationMode))))))) & (! ((manipulationMode ) & (X (! manipulationMode))))))) & (objectPlaced -> (((manipulationMode ) & (X (! manipulationMode))) | ((X explainObjectLocation) & (! ((manipulationMode ) & (X (! manipulationMode)))))))))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))))))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> (((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V (((! $regular_condition_SMV_ft$) & ((! LAST) & ((X $regular_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) -> ((X ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))))))) & ($regular_condition_SMV_ft$ -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | ((X $post_condition_SMV_ft$) & (! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))))))))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! manipulationMode) & (! LAST)) & (X manipulationMode)) & (! LAST))) | (X (((! LAST) U ((manipulationMode & (! LAST)) & (X (! manipulationMode)))) -> ((((manipulationMode & (! LAST)) & (X (! manipulationMode))) V (((! objectPlaced) & ((! LAST) & ((X objectPlaced) & (! ((manipulationMode & (! LAST)) & (X (! manipulationMode))))))) -> ((X (((manipulationMode & (! LAST)) & (X (! manipulationMode))) | ((X explainObjectLocation) & (! ((manipulationMode & (! LAST)) & (X (! manipulationMode))))))) & (! ((manipulationMode & (! LAST)) & (X (! manipulationMode))))))) & (objectPlaced -> (((manipulationMode & (! LAST)) & (X (! manipulationMode))) | ((X explainObjectLocation) & (! ((manipulationMode & (! LAST)) & (X (! manipulationMode)))))))))))) & (manipulationMode -> (((! LAST) U ((manipulationMode & (! LAST)) & (X (! manipulationMode)))) -> ((((manipulationMode & (! LAST)) & (X (! manipulationMode))) V (((! objectPlaced) & ((! LAST) & ((X objectPlaced) & (! ((manipulationMode & (! LAST)) & (X (! manipulationMode))))))) -> ((X (((manipulationMode & (! LAST)) & (X (! manipulationMode))) | ((X explainObjectLocation) & (! ((manipulationMode & (! LAST)) & (X (! manipulationMode))))))) & (! ((manipulationMode & (! LAST)) & (X (! manipulationMode))))))) & (objectPlaced -> (((manipulationMode & (! LAST)) & (X (! manipulationMode))) | ((X explainObjectLocation) & (! ((manipulationMode & (! LAST)) & (X (! manipulationMode)))))))))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre(SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((YtoPre($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$))))))) => ($post_condition_coco$ or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))) ))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ((YtoPre($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$))))))) => ($post_condition_coco$ or ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))))) ))))",
            "CoCoSpecCode": "((H((( not manipulationMode) and (YtoPre(manipulationMode))) => (YtoPre(SI( (manipulationMode and (FTP or (YtoPre( not manipulationMode)))), ((YtoPre(objectPlaced and ((YtoPre( not objectPlaced)) or (manipulationMode and (FTP or (YtoPre( not manipulationMode))))))) => (explainObjectLocation or (manipulationMode and (FTP or (YtoPre( not manipulationMode)))))) ))))) and ((SI( (manipulationMode and (FTP or (YtoPre( not manipulationMode)))), ( not (( not manipulationMode) and (YtoPre(manipulationMode)))) )) => (SI( (manipulationMode and (FTP or (YtoPre( not manipulationMode)))), ((YtoPre(objectPlaced and ((YtoPre( not objectPlaced)) or (manipulationMode and (FTP or (YtoPre( not manipulationMode))))))) => (explainObjectLocation or (manipulationMode and (FTP or (YtoPre( not manipulationMode)))))) ))))",
            "component": "Robot"
        },
        "_id": "23a0e109-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.036",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "R1.02  If the route changes, the autonomous system should stop and seek approval of the new plan ",
        "comments": "",
        "fulltext": "Robot  shall  before proceed  satisfy  requestPermission ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "proceed",
                "requestPermission"
            ],
            "component_name": "Robot",
            "componentTextRange": [
                0,
                4
            ],
            "stop_condition": "(proceed)",
            "timingTextRange": [
                14,
                27
            ],
            "post_condition": "(requestPermission)",
            "responseTextRange": [
                30,
                55
            ],
            "diagramVariables": "SC = <b><i>(proceed)</i></b>, Response = <b><i>(requestPermission)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisified.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "requestPermission",
            "post_condition_unexp_ft": "requestPermission",
            "post_condition_SMV_pt": "requestPermission",
            "post_condition_SMV_ft": "requestPermission",
            "post_condition_coco_smv": "requestPermission",
            "post_condition_coco": "requestPermission",
            "stop_condition_unexp_pt": "proceed",
            "stop_condition_unexp_ft": "proceed",
            "stop_condition_SMV_pt": "proceed",
            "stop_condition_SMV_ft": "proceed",
            "stop_condition_coco_smv": "proceed",
            "stop_condition_coco": "proceed",
            "ft_fetched": "(($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))",
            "ft": "((requestPermission | LAST) V (! proceed))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((! FTP) & (Y (O $post_condition_unexp_pt$)))))",
            "pt": "(H (proceed -> ((! FTP) & (Y (O requestPermission)))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((Y TRUE) & (Y (O $post_condition_SMV_pt$)))))",
            "ptExpanded": "(H (proceed -> (Y (O requestPermission))))",
            "ptFinBtwExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((Y TRUE) & (Y (O $post_condition_SMV_pt$)))))",
            "ptFinBtwExpanded": "(H (proceed -> ((Y TRUE) & (Y (O requestPermission)))))",
            "ftExpanded_fetched": "(($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))",
            "ftExpanded": "((requestPermission | LAST) V (! proceed))",
            "ftInfAUExpanded_fetched": "($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))",
            "ftInfAUExpanded": "(requestPermission V (! proceed))",
            "ftInfBtwExpanded_fetched": "($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))",
            "ftInfBtwExpanded": "(requestPermission V (! proceed))",
            "ftFinBtwExpanded_fetched": "(($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))",
            "ftFinBtwExpanded": "((requestPermission | LAST) V (! proceed))",
            "CoCoSpecCode_fetched": "(H($stop_condition_coco$ => (( not FTP) and (YtoPre(O($post_condition_coco$))))))",
            "CoCoSpecCode": "(H(proceed => (( not FTP) and (YtoPre(O(requestPermission))))))",
            "component": "Robot"
        },
        "_id": "23a0e10a-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.013",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "",
        "comments": "",
        "fulltext": "Explanation shall always satisfy Verifiable",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Verifiable"
            ],
            "component_name": "Explanation",
            "componentTextRange": [
                0,
                10
            ],
            "timingTextRange": [
                18,
                23
            ],
            "post_condition": "(Verifiable)",
            "responseTextRange": [
                25,
                42
            ],
            "diagramVariables": "Response = <b><i>(Verifiable)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "Verifiable",
            "post_condition_unexp_ft": "Verifiable",
            "post_condition_SMV_pt": "Verifiable",
            "post_condition_SMV_ft": "Verifiable",
            "post_condition_coco_smv": "Verifiable",
            "post_condition_coco": "Verifiable",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V Verifiable)",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H Verifiable)",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H Verifiable)",
            "ptFinBtwExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(H Verifiable)",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpanded": "(LAST V Verifiable)",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G Verifiable)",
            "ftInfBtwExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(G Verifiable)",
            "ftFinBtwExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "(LAST V Verifiable)",
            "CoCoSpecCode_fetched": "(H($post_condition_coco$))",
            "CoCoSpecCode": "(H(Verifiable))",
            "component": "Explanation"
        },
        "_id": "23a0e10b-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.034",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": " If the robot has a self recovery strategy, explain it to the operator ",
        "comments": "",
        "fulltext": "if selfRecoveryExists Robot shall eventually satisfy explainRecoveryStrategy",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "selfRecoveryExists",
                "explainRecoveryStrategy"
            ],
            "qualifier_word": "if",
            "pre_condition": "(selfRecoveryExists)",
            "regular_condition": "(selfRecoveryExists)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "Robot",
            "componentTextRange": [
                22,
                26
            ],
            "timingTextRange": [
                34,
                43
            ],
            "post_condition": "(explainRecoveryStrategy)",
            "responseTextRange": [
                45,
                75
            ],
            "diagramVariables": "TC = <b><i>(selfRecoveryExists)</i></b>, Response = <b><i>(explainRecoveryStrategy)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(selfRecoveryExists)</i></b> is true and any point in the interval where <b><i>(selfRecoveryExists)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "selfRecoveryExists",
            "regular_condition_unexp_ft": "selfRecoveryExists",
            "regular_condition_SMV_pt": "selfRecoveryExists",
            "regular_condition_SMV_ft": "selfRecoveryExists",
            "regular_condition_coco_smv": "selfRecoveryExists",
            "regular_condition_coco": "selfRecoveryExists",
            "post_condition_unexp_pt": "explainRecoveryStrategy",
            "post_condition_unexp_ft": "explainRecoveryStrategy",
            "post_condition_SMV_pt": "explainRecoveryStrategy",
            "post_condition_SMV_ft": "explainRecoveryStrategy",
            "post_condition_coco_smv": "explainRecoveryStrategy",
            "post_condition_coco": "explainRecoveryStrategy",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! selfRecoveryExists) & ((! LAST) & (X selfRecoveryExists))) -> (X ((! LAST) U explainRecoveryStrategy)))) & (selfRecoveryExists -> ((! LAST) U explainRecoveryStrategy)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! selfRecoveryExists)) | (! ((! explainRecoveryStrategy) S ((! explainRecoveryStrategy) & (selfRecoveryExists & ((Y (! selfRecoveryExists)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! selfRecoveryExists)) | (! ((! explainRecoveryStrategy) S ((! explainRecoveryStrategy) & (selfRecoveryExists & ((Y (! selfRecoveryExists)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! selfRecoveryExists)) | (! ((! explainRecoveryStrategy) S ((! explainRecoveryStrategy) & (selfRecoveryExists & ((Y (! selfRecoveryExists)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! selfRecoveryExists) & ((! LAST) & (X selfRecoveryExists))) -> (X ((! LAST) U explainRecoveryStrategy)))) & (selfRecoveryExists -> ((! LAST) U explainRecoveryStrategy)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! selfRecoveryExists) & (X selfRecoveryExists)) -> (X (F explainRecoveryStrategy)))) & (selfRecoveryExists -> (F explainRecoveryStrategy)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! selfRecoveryExists) & (X selfRecoveryExists)) -> (X (F explainRecoveryStrategy)))) & (selfRecoveryExists -> (F explainRecoveryStrategy)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! selfRecoveryExists) & ((! LAST) & (X selfRecoveryExists))) -> (X ((! LAST) U explainRecoveryStrategy)))) & (selfRecoveryExists -> ((! LAST) U explainRecoveryStrategy)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not selfRecoveryExists)) or ( not (SI( (selfRecoveryExists and ((YtoPre( not selfRecoveryExists)) or FTP)), ( not explainRecoveryStrategy) ))))",
            "component": "Robot"
        },
        "_id": "23a0e10c-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.037",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "R1.03 The robot should make a decision and notify afterwards why it ",
        "comments": "",
        "fulltext": "if missioncomplete Robot shall at the next timepoint satisfy explain",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "missioncomplete",
                "explain"
            ],
            "qualifier_word": "if",
            "pre_condition": "(missioncomplete)",
            "regular_condition": "(missioncomplete)",
            "conditionTextRange": [
                0,
                17
            ],
            "component_name": "Robot",
            "componentTextRange": [
                19,
                23
            ],
            "timingTextRange": [
                31,
                51
            ],
            "post_condition": "(explain)",
            "responseTextRange": [
                53,
                67
            ],
            "diagramVariables": "TC = <b><i>(missioncomplete)</i></b>, Response = <b><i>(explain)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(missioncomplete)</i></b> is true and any point in the interval where <b><i>(missioncomplete)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "missioncomplete",
            "regular_condition_unexp_ft": "missioncomplete",
            "regular_condition_SMV_pt": "missioncomplete",
            "regular_condition_SMV_ft": "missioncomplete",
            "regular_condition_coco_smv": "missioncomplete",
            "regular_condition_coco": "missioncomplete",
            "post_condition_unexp_pt": "explain",
            "post_condition_unexp_ft": "explain",
            "post_condition_SMV_pt": "explain",
            "post_condition_SMV_ft": "explain",
            "post_condition_coco_smv": "explain",
            "post_condition_coco": "explain",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
            "ft": "((LAST V (((! missioncomplete) & ((! LAST) & (X missioncomplete))) -> (X (LAST | (X explain))))) & (missioncomplete -> (LAST | (X explain))))",
            "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
            "pt": "(H ((Y (missioncomplete & ((Y (! missioncomplete)) | FTP))) -> (explain | FTP)))",
            "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
            "ptExpanded": "(H ((Y (missioncomplete & ((Y (! missioncomplete)) | (! (Y TRUE))))) -> (explain | (! (Y TRUE)))))",
            "ptFinBtwExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
            "ptFinBtwExpanded": "(H ((Y (missioncomplete & ((Y (! missioncomplete)) | (! (Y TRUE))))) -> (explain | (! (Y TRUE)))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V (((! missioncomplete) & ((! LAST) & (X missioncomplete))) -> (X (LAST | (X explain))))) & (missioncomplete -> (LAST | (X explain))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! missioncomplete) & (X missioncomplete)) -> (X (X explain)))) & (missioncomplete -> (X explain)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! missioncomplete) & (X missioncomplete)) -> (X (X explain)))) & (missioncomplete -> (X explain)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V (((! missioncomplete) & ((! LAST) & (X missioncomplete))) -> (X (LAST | (X explain))))) & (missioncomplete -> (LAST | (X explain))))",
            "CoCoSpecCode_fetched": "(H((YtoPre($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP))) => ($post_condition_coco$ or FTP)))",
            "CoCoSpecCode": "(H((YtoPre(missioncomplete and ((YtoPre( not missioncomplete)) or FTP))) => (explain or FTP)))",
            "component": "Robot"
        },
        "_id": "23a0e10d-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.045",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": " R3.04 ``We’d want to try to get some understanding of where it thinks it's been in this area... where it thinks it's been and then where it thinks it's taken the measurements from\"",
        "comments": "",
        "fulltext": "Robot shall always satisfy (explainVisited => returnVisited) & (explainMeasurements => returnMeasurementOrigins)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "explainVisited",
                "returnVisited",
                "explainMeasurements",
                "returnMeasurementOrigins"
            ],
            "component_name": "Robot",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(( explainVisited => returnVisited ) & ( explainMeasurements => returnMeasurementOrigins ))",
            "responseTextRange": [
                19,
                111
            ],
            "diagramVariables": "Response = <b><i>(( explainVisited => returnVisited ) & ( explainMeasurements => returnMeasurementOrigins ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((explainVisited -> returnVisited) & (explainMeasurements -> returnMeasurementOrigins))",
            "post_condition_unexp_ft": "((explainVisited -> returnVisited) & (explainMeasurements -> returnMeasurementOrigins))",
            "post_condition_SMV_pt": "((explainVisited -> returnVisited) & (explainMeasurements -> returnMeasurementOrigins))",
            "post_condition_SMV_ft": "((explainVisited -> returnVisited) & (explainMeasurements -> returnMeasurementOrigins))",
            "post_condition_coco_smv": "((explainVisited -> returnVisited) & (explainMeasurements -> returnMeasurementOrigins))",
            "post_condition_coco": "((explainVisited => returnVisited) and (explainMeasurements => returnMeasurementOrigins))",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V ((explainVisited -> returnVisited) & (explainMeasurements -> returnMeasurementOrigins)))",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H ((explainVisited -> returnVisited) & (explainMeasurements -> returnMeasurementOrigins)))",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H ((explainVisited -> returnVisited) & (explainMeasurements -> returnMeasurementOrigins)))",
            "ptFinBtwExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(H ((explainVisited -> returnVisited) & (explainMeasurements -> returnMeasurementOrigins)))",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpanded": "(LAST V ((explainVisited -> returnVisited) & (explainMeasurements -> returnMeasurementOrigins)))",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G ((explainVisited -> returnVisited) & (explainMeasurements -> returnMeasurementOrigins)))",
            "ftInfBtwExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(G ((explainVisited -> returnVisited) & (explainMeasurements -> returnMeasurementOrigins)))",
            "ftFinBtwExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "(LAST V ((explainVisited -> returnVisited) & (explainMeasurements -> returnMeasurementOrigins)))",
            "CoCoSpecCode_fetched": "(H($post_condition_coco$))",
            "CoCoSpecCode": "(H(((explainVisited => returnVisited) and (explainMeasurements => returnMeasurementOrigins))))",
            "component": "Robot"
        },
        "_id": "23a0e10e-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.017",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "In performance reviews, the explanation should be detailed and contain all information",
        "comments": "",
        "fulltext": "in performanceReviewMode Explanation shall always satisfy detailed",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "performanceReviewMode",
                "detailed"
            ],
            "scope_mode": "performanceReviewMode",
            "scopeTextRange": [
                0,
                23
            ],
            "component_name": "Explanation",
            "componentTextRange": [
                25,
                35
            ],
            "timingTextRange": [
                43,
                48
            ],
            "post_condition": "(detailed)",
            "responseTextRange": [
                50,
                65
            ],
            "diagramVariables": "M = <b><i>performanceReviewMode</i></b>,, Response = <b><i>(detailed)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>performanceReviewMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "performanceReviewMode",
            "scope_mode_coco": "performanceReviewMode",
            "scope_mode_ft": "performanceReviewMode",
            "post_condition_unexp_pt": "detailed",
            "post_condition_unexp_ft": "detailed",
            "post_condition_SMV_pt": "detailed",
            "post_condition_SMV_ft": "detailed",
            "post_condition_coco_smv": "detailed",
            "post_condition_coco": "detailed",
            "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V (performanceReviewMode -> detailed))",
            "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H (performanceReviewMode -> detailed))",
            "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H (performanceReviewMode -> detailed))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ($post_condition_SMV_pt$ S ($post_condition_SMV_pt$ & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! performanceReviewMode) & (Y performanceReviewMode)) -> (Y (detailed S (detailed & (performanceReviewMode & ((! (Y TRUE)) | (Y (! performanceReviewMode)))))))))",
            "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "(LAST V (performanceReviewMode -> detailed))",
            "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G (performanceReviewMode -> detailed))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! performanceReviewMode) ) & (X performanceReviewMode))) | (X ((F ((performanceReviewMode ) & (X (! performanceReviewMode)))) -> (((performanceReviewMode ) & (X (! performanceReviewMode))) V detailed))))) & (performanceReviewMode -> ((F ((performanceReviewMode ) & (X (! performanceReviewMode)))) -> (((performanceReviewMode ) & (X (! performanceReviewMode))) V detailed))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! performanceReviewMode) & (! LAST)) & (X performanceReviewMode)) & (! LAST))) | (X (((! LAST) U ((performanceReviewMode & (! LAST)) & (X (! performanceReviewMode)))) -> (((performanceReviewMode & (! LAST)) & (X (! performanceReviewMode))) V detailed))))) & (performanceReviewMode -> (((! LAST) U ((performanceReviewMode & (! LAST)) & (X (! performanceReviewMode)))) -> (((performanceReviewMode & (! LAST)) & (X (! performanceReviewMode))) V detailed))))",
            "CoCoSpecCode_fetched": "(H($scope_mode_coco$ => $post_condition_coco$))",
            "CoCoSpecCode": "(H(performanceReviewMode => detailed))",
            "component": "Explanation"
        },
        "_id": "23a0e10f-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.011",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "",
        "comments": "",
        "fulltext": "Explanation shall always satisfy Truthful",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "Truthful"
            ],
            "component_name": "Explanation",
            "componentTextRange": [
                0,
                10
            ],
            "timingTextRange": [
                18,
                23
            ],
            "post_condition": "(Truthful)",
            "responseTextRange": [
                25,
                40
            ],
            "diagramVariables": "Response = <b><i>(Truthful)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "Truthful",
            "post_condition_unexp_ft": "Truthful",
            "post_condition_SMV_pt": "Truthful",
            "post_condition_SMV_ft": "Truthful",
            "post_condition_coco_smv": "Truthful",
            "post_condition_coco": "Truthful",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V Truthful)",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H Truthful)",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H Truthful)",
            "ptFinBtwExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(H Truthful)",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpanded": "(LAST V Truthful)",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G Truthful)",
            "ftInfBtwExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(G Truthful)",
            "ftFinBtwExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "(LAST V Truthful)",
            "CoCoSpecCode_fetched": "(H($post_condition_coco$))",
            "CoCoSpecCode": "(H(Truthful))",
            "component": "Explanation"
        },
        "_id": "23a0e110-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.018",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "If plan is proceeding as normal, minimal explanations. If things start to go wrong, provide the ability to 'dig down' into more explanation ",
        "comments": "if unexpectedBehaviour & detailRequested Robot shall immediately satisfy detailedExplain",
        "fulltext": "Robot shall always satisfy ((unexpectedBehaviour & detailRequested)=>detailedExplain) | (!unexpectedBehaviour=>explain)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "unexpectedBehaviour",
                "detailRequested",
                "detailedExplain",
                "explain"
            ],
            "component_name": "Robot",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(( ( unexpectedBehaviour & detailRequested ) => detailedExplain ) | ( ! unexpectedBehaviour => explain ))",
            "responseTextRange": [
                19,
                118
            ],
            "diagramVariables": "Response = <b><i>(( ( unexpectedBehaviour & detailRequested ) => detailedExplain ) | ( ! unexpectedBehaviour => explain ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(((unexpectedBehaviour & detailRequested) -> detailedExplain) | ((! unexpectedBehaviour) -> explain))",
            "post_condition_unexp_ft": "(((unexpectedBehaviour & detailRequested) -> detailedExplain) | ((! unexpectedBehaviour) -> explain))",
            "post_condition_SMV_pt": "(((unexpectedBehaviour & detailRequested) -> detailedExplain) | ((! unexpectedBehaviour) -> explain))",
            "post_condition_SMV_ft": "(((unexpectedBehaviour & detailRequested) -> detailedExplain) | ((! unexpectedBehaviour) -> explain))",
            "post_condition_coco_smv": "(((unexpectedBehaviour & detailRequested) -> detailedExplain) | ((! unexpectedBehaviour) -> explain))",
            "post_condition_coco": "(((unexpectedBehaviour and detailRequested) => detailedExplain) or (( not unexpectedBehaviour) => explain))",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V (((unexpectedBehaviour & detailRequested) -> detailedExplain) | ((! unexpectedBehaviour) -> explain)))",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H (((unexpectedBehaviour & detailRequested) -> detailedExplain) | ((! unexpectedBehaviour) -> explain)))",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H (((unexpectedBehaviour & detailRequested) -> detailedExplain) | ((! unexpectedBehaviour) -> explain)))",
            "ptFinBtwExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(H (((unexpectedBehaviour & detailRequested) -> detailedExplain) | ((! unexpectedBehaviour) -> explain)))",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpanded": "(LAST V (((unexpectedBehaviour & detailRequested) -> detailedExplain) | ((! unexpectedBehaviour) -> explain)))",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G (((unexpectedBehaviour & detailRequested) -> detailedExplain) | ((! unexpectedBehaviour) -> explain)))",
            "ftInfBtwExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(G (((unexpectedBehaviour & detailRequested) -> detailedExplain) | ((! unexpectedBehaviour) -> explain)))",
            "ftFinBtwExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "(LAST V (((unexpectedBehaviour & detailRequested) -> detailedExplain) | ((! unexpectedBehaviour) -> explain)))",
            "CoCoSpecCode_fetched": "(H($post_condition_coco$))",
            "CoCoSpecCode": "(H((((unexpectedBehaviour and detailRequested) => detailedExplain) or (( not unexpectedBehaviour) => explain))))",
            "component": "Robot"
        },
        "_id": "23a0e111-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.046",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "R3.05 You would need an explanation as to why it's not taken the optimal solution",
        "comments": "",
        "fulltext": "if notOptimal Robot shall immediately satisfy explain",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "notOptimal",
                "explain"
            ],
            "qualifier_word": "if",
            "pre_condition": "(notOptimal)",
            "regular_condition": "(notOptimal)",
            "conditionTextRange": [
                0,
                12
            ],
            "component_name": "Robot",
            "componentTextRange": [
                14,
                18
            ],
            "timingTextRange": [
                26,
                36
            ],
            "post_condition": "(explain)",
            "responseTextRange": [
                38,
                52
            ],
            "diagramVariables": "TC = <b><i>(notOptimal)</i></b>, Response = <b><i>(explain)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(notOptimal)</i></b> is true and any point in the interval where <b><i>(notOptimal)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "notOptimal",
            "regular_condition_unexp_ft": "notOptimal",
            "regular_condition_SMV_pt": "notOptimal",
            "regular_condition_SMV_ft": "notOptimal",
            "regular_condition_coco_smv": "notOptimal",
            "regular_condition_coco": "notOptimal",
            "post_condition_unexp_pt": "explain",
            "post_condition_unexp_ft": "explain",
            "post_condition_SMV_pt": "explain",
            "post_condition_SMV_ft": "explain",
            "post_condition_coco_smv": "explain",
            "post_condition_coco": "explain",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
            "ft": "((LAST V (((! notOptimal) & ((! LAST) & (X notOptimal))) -> (X explain))) & (notOptimal -> explain))",
            "pt_fetched": "(H (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) -> $post_condition_unexp_pt$))",
            "pt": "(H ((notOptimal & ((Y (! notOptimal)) | FTP)) -> explain))",
            "ptExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((notOptimal & ((Y (! notOptimal)) | (! (Y TRUE)))) -> explain))",
            "ptFinBtwExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptFinBtwExpanded": "(H ((notOptimal & ((Y (! notOptimal)) | (! (Y TRUE)))) -> explain))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "((LAST V (((! notOptimal) & ((! LAST) & (X notOptimal))) -> (X explain))) & (notOptimal -> explain))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "((G (((! notOptimal) & (X notOptimal)) -> (X explain))) & (notOptimal -> explain))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfBtwExpanded": "((G (((! notOptimal) & (X notOptimal)) -> (X explain))) & (notOptimal -> explain))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftFinBtwExpanded": "((LAST V (((! notOptimal) & ((! LAST) & (X notOptimal))) -> (X explain))) & (notOptimal -> explain))",
            "CoCoSpecCode_fetched": "(H(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) => $post_condition_coco$))",
            "CoCoSpecCode": "(H((notOptimal and ((YtoPre( not notOptimal)) or FTP)) => explain))",
            "component": "Robot"
        },
        "_id": "23a0e112-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.004",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": " In a manipulation task, the robot should explain how it decided what object it is working with, how it identified the material and how it decided where to cut ",
        "comments": "",
        "fulltext": "in manipulationMode Robot shall immediately satisfy explainObject & Future(explainMaterial) & Future(explainCut)  ",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "manipulationMode",
                "explainObject",
                "Future",
                "explainMaterial",
                "explainCut"
            ],
            "scope_mode": "manipulationMode",
            "scopeTextRange": [
                0,
                18
            ],
            "component_name": "Robot",
            "componentTextRange": [
                20,
                24
            ],
            "timingTextRange": [
                32,
                42
            ],
            "post_condition": "(explainObject & Future ( explainMaterial ) & Future ( explainCut ))",
            "responseTextRange": [
                44,
                111
            ],
            "diagramVariables": "M = <b><i>manipulationMode</i></b>,, Response = <b><i>(explainObject & Future ( explainMaterial ) & Future ( explainCut ))</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>manipulationMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_immediately_satisfaction.svg",
            "scope_mode_pt": "manipulationMode",
            "scope_mode_coco": "manipulationMode",
            "scope_mode_ft": "manipulationMode",
            "post_condition_unexp_pt": "((explainObject & Future(explainMaterial)) & Future(explainCut))",
            "post_condition_unexp_ft": "((explainObject & Future(explainMaterial)) & Future(explainCut))",
            "post_condition_SMV_pt": "((explainObject & Future(explainMaterial)) & Future(explainCut))",
            "post_condition_SMV_ft": "((explainObject & Future(explainMaterial)) & Future(explainCut))",
            "post_condition_coco_smv": "((explainObject & Future(explainMaterial)) & Future(explainCut))",
            "post_condition_coco": "((explainObject and Future(explainMaterial)) and Future(explainCut))",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X $post_condition_unexp_ft$))) & ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
            "ft": "((LAST V ((! (Fin_manipulationMode & (! LAST))) | (X ((explainObject & Future(explainMaterial)) & Future(explainCut))))) & (manipulationMode -> ((explainObject & Future(explainMaterial)) & Future(explainCut))))",
            "pt_fetched": "(H (Fin_$scope_mode_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H (Fin_manipulationMode -> ((explainObject & Future(explainMaterial)) & Future(explainCut))))",
            "ptExpanded_fetched": "(H (($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((manipulationMode & (Z (! manipulationMode))) -> ((explainObject & Future(explainMaterial)) & Future(explainCut))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ((($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) S ((($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))) -> $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! manipulationMode) & (Y manipulationMode)) -> (Y (((manipulationMode & ((! (Y TRUE)) | (Y (! manipulationMode)))) -> ((explainObject & Future(explainMaterial)) & Future(explainCut))) S (((manipulationMode & ((! (Y TRUE)) | (Y (! manipulationMode)))) -> ((explainObject & Future(explainMaterial)) & Future(explainCut))) & (manipulationMode & ((! (Y TRUE)) | (Y (! manipulationMode)))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X $post_condition_SMV_ft$))) & ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "((LAST V ((! ((((! manipulationMode) & (! LAST)) & (X manipulationMode)) & (! LAST))) | (X ((explainObject & Future(explainMaterial)) & Future(explainCut))))) & (manipulationMode -> ((explainObject & Future(explainMaterial)) & Future(explainCut))))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X $post_condition_SMV_ft$))) & ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "((G ((! (((! manipulationMode) ) & (X manipulationMode))) | (X ((explainObject & Future(explainMaterial)) & Future(explainCut))))) & (manipulationMode -> ((explainObject & Future(explainMaterial)) & Future(explainCut))))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G ((! (((! manipulationMode) ) & (X manipulationMode))) | (X ((F ((manipulationMode ) & (X (! manipulationMode)))) -> ((explainObject & Future(explainMaterial)) & Future(explainCut)))))) & (manipulationMode -> ((F ((manipulationMode ) & (X (! manipulationMode)))) -> ((explainObject & Future(explainMaterial)) & Future(explainCut)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! manipulationMode) & (! LAST)) & (X manipulationMode)) & (! LAST))) | (X (((! LAST) U ((manipulationMode & (! LAST)) & (X (! manipulationMode)))) -> ((explainObject & Future(explainMaterial)) & Future(explainCut)))))) & (manipulationMode -> (((! LAST) U ((manipulationMode & (! LAST)) & (X (! manipulationMode)))) -> ((explainObject & Future(explainMaterial)) & Future(explainCut)))))",
            "CoCoSpecCode_fetched": "(H(($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))) => $post_condition_coco$))",
            "CoCoSpecCode": "(H((manipulationMode and (FTP or (YtoPre( not manipulationMode)))) => ((explainObject and Future(explainMaterial)) and Future(explainCut))))",
            "component": "Robot"
        },
        "_id": "23a0e113-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.019",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "If situation is low risk, give more information in explanations ",
        "comments": "",
        "fulltext": "if situationAssessment=>lowRisk Explanation shall satisfy detailed",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "situationAssessment",
                "lowRisk",
                "detailed"
            ],
            "qualifier_word": "if",
            "pre_condition": "(situationAssessment => lowRisk)",
            "regular_condition": "(situationAssessment => lowRisk)",
            "conditionTextRange": [
                0,
                30
            ],
            "component_name": "Explanation",
            "componentTextRange": [
                32,
                42
            ],
            "post_condition": "(detailed)",
            "responseTextRange": [
                50,
                65
            ],
            "diagramVariables": "TC = <b><i>(situationAssessment => lowRisk)</i></b>, Response = <b><i>(detailed)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(situationAssessment => lowRisk)</i></b> is true and any point in the interval where <b><i>(situationAssessment => lowRisk)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(situationAssessment -> lowRisk)",
            "regular_condition_unexp_ft": "(situationAssessment -> lowRisk)",
            "regular_condition_SMV_pt": "(situationAssessment -> lowRisk)",
            "regular_condition_SMV_ft": "(situationAssessment -> lowRisk)",
            "regular_condition_coco_smv": "(situationAssessment -> lowRisk)",
            "regular_condition_coco": "(situationAssessment => lowRisk)",
            "post_condition_unexp_pt": "detailed",
            "post_condition_unexp_ft": "detailed",
            "post_condition_SMV_pt": "detailed",
            "post_condition_SMV_ft": "detailed",
            "post_condition_coco_smv": "detailed",
            "post_condition_coco": "detailed",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! (situationAssessment -> lowRisk)) & ((! LAST) & (X (situationAssessment -> lowRisk)))) -> (X ((! LAST) U detailed)))) & ((situationAssessment -> lowRisk) -> ((! LAST) U detailed)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! (situationAssessment -> lowRisk))) | (! ((! detailed) S ((! detailed) & ((situationAssessment -> lowRisk) & ((Y (! (situationAssessment -> lowRisk))) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! (situationAssessment -> lowRisk))) | (! ((! detailed) S ((! detailed) & ((situationAssessment -> lowRisk) & ((Y (! (situationAssessment -> lowRisk))) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! (situationAssessment -> lowRisk))) | (! ((! detailed) S ((! detailed) & ((situationAssessment -> lowRisk) & ((Y (! (situationAssessment -> lowRisk))) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! (situationAssessment -> lowRisk)) & ((! LAST) & (X (situationAssessment -> lowRisk)))) -> (X ((! LAST) U detailed)))) & ((situationAssessment -> lowRisk) -> ((! LAST) U detailed)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (situationAssessment -> lowRisk)) & (X (situationAssessment -> lowRisk))) -> (X (F detailed)))) & ((situationAssessment -> lowRisk) -> (F detailed)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (situationAssessment -> lowRisk)) & (X (situationAssessment -> lowRisk))) -> (X (F detailed)))) & ((situationAssessment -> lowRisk) -> (F detailed)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! (situationAssessment -> lowRisk)) & ((! LAST) & (X (situationAssessment -> lowRisk)))) -> (X ((! LAST) U detailed)))) & ((situationAssessment -> lowRisk) -> ((! LAST) U detailed)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not (situationAssessment => lowRisk))) or ( not (SI( ((situationAssessment => lowRisk) and ((YtoPre( not (situationAssessment => lowRisk))) or FTP)), ( not detailed) ))))",
            "component": "Explanation"
        },
        "_id": "23a0e114-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.047",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": " R3.06 `I could be interested in what its fall-backs are. If it can't get down one thing [path], what would it do?\" ",
        "comments": "",
        "fulltext": "if pathImpossible Robot shall immediately satisfy returnAllOption",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "pathImpossible",
                "returnAllOption"
            ],
            "qualifier_word": "if",
            "pre_condition": "(pathImpossible)",
            "regular_condition": "(pathImpossible)",
            "conditionTextRange": [
                0,
                16
            ],
            "component_name": "Robot",
            "componentTextRange": [
                18,
                22
            ],
            "timingTextRange": [
                30,
                40
            ],
            "post_condition": "(returnAllOption)",
            "responseTextRange": [
                42,
                64
            ],
            "diagramVariables": "TC = <b><i>(pathImpossible)</i></b>, Response = <b><i>(returnAllOption)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(pathImpossible)</i></b> is true and any point in the interval where <b><i>(pathImpossible)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "pathImpossible",
            "regular_condition_unexp_ft": "pathImpossible",
            "regular_condition_SMV_pt": "pathImpossible",
            "regular_condition_SMV_ft": "pathImpossible",
            "regular_condition_coco_smv": "pathImpossible",
            "regular_condition_coco": "pathImpossible",
            "post_condition_unexp_pt": "returnAllOption",
            "post_condition_unexp_ft": "returnAllOption",
            "post_condition_SMV_pt": "returnAllOption",
            "post_condition_SMV_ft": "returnAllOption",
            "post_condition_coco_smv": "returnAllOption",
            "post_condition_coco": "returnAllOption",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
            "ft": "((LAST V (((! pathImpossible) & ((! LAST) & (X pathImpossible))) -> (X returnAllOption))) & (pathImpossible -> returnAllOption))",
            "pt_fetched": "(H (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) -> $post_condition_unexp_pt$))",
            "pt": "(H ((pathImpossible & ((Y (! pathImpossible)) | FTP)) -> returnAllOption))",
            "ptExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((pathImpossible & ((Y (! pathImpossible)) | (! (Y TRUE)))) -> returnAllOption))",
            "ptFinBtwExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptFinBtwExpanded": "(H ((pathImpossible & ((Y (! pathImpossible)) | (! (Y TRUE)))) -> returnAllOption))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "((LAST V (((! pathImpossible) & ((! LAST) & (X pathImpossible))) -> (X returnAllOption))) & (pathImpossible -> returnAllOption))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "((G (((! pathImpossible) & (X pathImpossible)) -> (X returnAllOption))) & (pathImpossible -> returnAllOption))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfBtwExpanded": "((G (((! pathImpossible) & (X pathImpossible)) -> (X returnAllOption))) & (pathImpossible -> returnAllOption))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftFinBtwExpanded": "((LAST V (((! pathImpossible) & ((! LAST) & (X pathImpossible))) -> (X returnAllOption))) & (pathImpossible -> returnAllOption))",
            "CoCoSpecCode_fetched": "(H(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) => $post_condition_coco$))",
            "CoCoSpecCode": "(H((pathImpossible and ((YtoPre( not pathImpossible)) or FTP)) => returnAllOption))",
            "component": "Robot"
        },
        "_id": "23a0e115-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.020",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "For any decision made, give explanation ",
        "comments": "",
        "fulltext": "when decisionMaking Robot shall eventually satisfy explain",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "decisionMaking",
                "explain"
            ],
            "qualifier_word": "when",
            "pre_condition": "(decisionMaking)",
            "regular_condition": "(decisionMaking)",
            "conditionTextRange": [
                0,
                18
            ],
            "component_name": "Robot",
            "componentTextRange": [
                20,
                24
            ],
            "timingTextRange": [
                32,
                41
            ],
            "post_condition": "(explain)",
            "responseTextRange": [
                43,
                57
            ],
            "diagramVariables": "TC = <b><i>(decisionMaking)</i></b>, Response = <b><i>(explain)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(decisionMaking)</i></b> is true and any point in the interval where <b><i>(decisionMaking)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "decisionMaking",
            "regular_condition_unexp_ft": "decisionMaking",
            "regular_condition_SMV_pt": "decisionMaking",
            "regular_condition_SMV_ft": "decisionMaking",
            "regular_condition_coco_smv": "decisionMaking",
            "regular_condition_coco": "decisionMaking",
            "post_condition_unexp_pt": "explain",
            "post_condition_unexp_ft": "explain",
            "post_condition_SMV_pt": "explain",
            "post_condition_SMV_ft": "explain",
            "post_condition_coco_smv": "explain",
            "post_condition_coco": "explain",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! decisionMaking) & ((! LAST) & (X decisionMaking))) -> (X ((! LAST) U explain)))) & (decisionMaking -> ((! LAST) U explain)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! decisionMaking)) | (! ((! explain) S ((! explain) & (decisionMaking & ((Y (! decisionMaking)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! decisionMaking)) | (! ((! explain) S ((! explain) & (decisionMaking & ((Y (! decisionMaking)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! decisionMaking)) | (! ((! explain) S ((! explain) & (decisionMaking & ((Y (! decisionMaking)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! decisionMaking) & ((! LAST) & (X decisionMaking))) -> (X ((! LAST) U explain)))) & (decisionMaking -> ((! LAST) U explain)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! decisionMaking) & (X decisionMaking)) -> (X (F explain)))) & (decisionMaking -> (F explain)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! decisionMaking) & (X decisionMaking)) -> (X (F explain)))) & (decisionMaking -> (F explain)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! decisionMaking) & ((! LAST) & (X decisionMaking))) -> (X ((! LAST) U explain)))) & (decisionMaking -> ((! LAST) U explain)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not decisionMaking)) or ( not (SI( (decisionMaking and ((YtoPre( not decisionMaking)) or FTP)), ( not explain) ))))",
            "component": "Robot"
        },
        "_id": "23a0e116-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.021",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "system diagnosis requires more explanation ",
        "comments": "",
        "fulltext": "in systemDiagnosis mode Explanation shall satisfy detailed",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "systemDiagnosis",
                "detailed"
            ],
            "scope_mode": "systemDiagnosis",
            "scopeTextRange": [
                0,
                22
            ],
            "component_name": "Explanation",
            "componentTextRange": [
                24,
                34
            ],
            "post_condition": "(detailed)",
            "responseTextRange": [
                42,
                57
            ],
            "diagramVariables": "M = <b><i>systemDiagnosis</i></b>,, Response = <b><i>(detailed)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>systemDiagnosis</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_null_satisfaction.svg",
            "scope_mode_pt": "systemDiagnosis",
            "scope_mode_coco": "systemDiagnosis",
            "scope_mode_ft": "systemDiagnosis",
            "post_condition_unexp_pt": "detailed",
            "post_condition_unexp_ft": "detailed",
            "post_condition_SMV_pt": "detailed",
            "post_condition_SMV_ft": "detailed",
            "post_condition_coco_smv": "detailed",
            "post_condition_coco": "detailed",
            "ft_fetched": "((LAST V ((! (Fin_$scope_mode_ft$ & (! LAST))) | (X ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))) & ($scope_mode_ft$ -> ((! (Lin_$scope_mode_ft$ | LAST)) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V ((! (Fin_systemDiagnosis & (! LAST))) | (X ((! (Lin_systemDiagnosis | LAST)) U detailed)))) & (systemDiagnosis -> ((! (Lin_systemDiagnosis | LAST)) U detailed)))",
            "pt_fetched": "((H (Lin_$scope_mode_pt$ -> (Y (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))) & (((! Lin_$scope_mode_pt$) S ((! Lin_$scope_mode_pt$) & Fin_$scope_mode_pt$)) -> (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & Fin_$scope_mode_pt$)))))",
            "pt": "((H (Lin_systemDiagnosis -> (Y (! ((! detailed) S ((! detailed) & Fin_systemDiagnosis)))))) & (((! Lin_systemDiagnosis) S ((! Lin_systemDiagnosis) & Fin_systemDiagnosis)) -> (! ((! detailed) S ((! detailed) & Fin_systemDiagnosis)))))",
            "ptExpanded_fetched": "((H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))) & (((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) S ((! ((! $scope_mode_pt$) & (Y $scope_mode_pt$))) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))) -> (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptExpanded": "((H (((! systemDiagnosis) & (Y systemDiagnosis)) -> (Y (! ((! detailed) S ((! detailed) & (systemDiagnosis & (Z (! systemDiagnosis))))))))) & (((! ((! systemDiagnosis) & (Y systemDiagnosis))) S ((! ((! systemDiagnosis) & (Y systemDiagnosis))) & (systemDiagnosis & (Z (! systemDiagnosis))))) -> (! ((! detailed) S ((! detailed) & (systemDiagnosis & (Z (! systemDiagnosis))))))))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$))))))))))",
            "ptFinBtwExpanded": "(H (((! systemDiagnosis) & (Y systemDiagnosis)) -> (Y (! ((! detailed) S ((! detailed) & (systemDiagnosis & ((! (Y TRUE)) | (Y (! systemDiagnosis))))))))))",
            "ftExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) | LAST)) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V ((! ((((! systemDiagnosis) & (! LAST)) & (X systemDiagnosis)) & (! LAST))) | (X ((! (((systemDiagnosis & (! LAST)) & (X (! systemDiagnosis))) | LAST)) U detailed)))) & (systemDiagnosis -> ((! (((systemDiagnosis & (! LAST)) & (X (! systemDiagnosis))) | LAST)) U detailed)))",
            "ftInfAUExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))) & ($scope_mode_ft$ -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G ((! (((! systemDiagnosis) ) & (X systemDiagnosis))) | (X ((! ((systemDiagnosis ) & (X (! systemDiagnosis)))) U detailed)))) & (systemDiagnosis -> ((! ((systemDiagnosis ) & (X (! systemDiagnosis)))) U detailed)))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! systemDiagnosis) ) & (X systemDiagnosis))) | (X ((F ((systemDiagnosis ) & (X (! systemDiagnosis)))) -> ((! ((systemDiagnosis ) & (X (! systemDiagnosis)))) U detailed))))) & (systemDiagnosis -> ((F ((systemDiagnosis ) & (X (! systemDiagnosis)))) -> ((! ((systemDiagnosis ) & (X (! systemDiagnosis)))) U detailed))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((! (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) U $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! systemDiagnosis) & (! LAST)) & (X systemDiagnosis)) & (! LAST))) | (X (((! LAST) U ((systemDiagnosis & (! LAST)) & (X (! systemDiagnosis)))) -> ((! ((systemDiagnosis & (! LAST)) & (X (! systemDiagnosis)))) U detailed))))) & (systemDiagnosis -> (((! LAST) U ((systemDiagnosis & (! LAST)) & (X (! systemDiagnosis)))) -> ((! ((systemDiagnosis & (! LAST)) & (X (! systemDiagnosis)))) U detailed))))",
            "CoCoSpecCode_fetched": "((H((( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$))) => (YtoPre( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))) and ((SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not (( not $scope_mode_coco$) and (YtoPre($scope_mode_coco$)))) )) => ( not (SI( ($scope_mode_coco$ and (FTP or (YtoPre( not $scope_mode_coco$)))), ( not $post_condition_coco$) )))))",
            "CoCoSpecCode": "((H((( not systemDiagnosis) and (YtoPre(systemDiagnosis))) => (YtoPre( not (SI( (systemDiagnosis and (FTP or (YtoPre( not systemDiagnosis)))), ( not detailed) )))))) and ((SI( (systemDiagnosis and (FTP or (YtoPre( not systemDiagnosis)))), ( not (( not systemDiagnosis) and (YtoPre(systemDiagnosis)))) )) => ( not (SI( (systemDiagnosis and (FTP or (YtoPre( not systemDiagnosis)))), ( not detailed) )))))",
            "component": "Explanation"
        },
        "_id": "23a0e117-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.048",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "R3.07 ``In the nuclear context I probably want to have some knowledge of the robot's overall health and condition, that it's functioning normally ",
        "comments": "",
        "fulltext": "Robot shall always satisfy provideHealthUpdate & selfRecoveryStrategyConfidence > acceptableThreshold",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "provideHealthUpdate",
                "selfRecoveryStrategyConfidence",
                "acceptableThreshold"
            ],
            "component_name": "Robot",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(provideHealthUpdate & selfRecoveryStrategyConfidence > acceptableThreshold)",
            "responseTextRange": [
                19,
                100
            ],
            "diagramVariables": "Response = <b><i>(provideHealthUpdate & selfRecoveryStrategyConfidence > acceptableThreshold)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(provideHealthUpdate & (selfRecoveryStrategyConfidence > acceptableThreshold))",
            "post_condition_unexp_ft": "(provideHealthUpdate & (selfRecoveryStrategyConfidence > acceptableThreshold))",
            "post_condition_SMV_pt": "(provideHealthUpdate & (selfRecoveryStrategyConfidence > acceptableThreshold))",
            "post_condition_SMV_ft": "(provideHealthUpdate & (selfRecoveryStrategyConfidence > acceptableThreshold))",
            "post_condition_coco_smv": "(provideHealthUpdate & (selfRecoveryStrategyConfidence > acceptableThreshold))",
            "post_condition_coco": "(provideHealthUpdate and (selfRecoveryStrategyConfidence > acceptableThreshold))",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V (provideHealthUpdate & (selfRecoveryStrategyConfidence > acceptableThreshold)))",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H (provideHealthUpdate & (selfRecoveryStrategyConfidence > acceptableThreshold)))",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H (provideHealthUpdate & (selfRecoveryStrategyConfidence > acceptableThreshold)))",
            "ptFinBtwExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(H (provideHealthUpdate & (selfRecoveryStrategyConfidence > acceptableThreshold)))",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpanded": "(LAST V (provideHealthUpdate & (selfRecoveryStrategyConfidence > acceptableThreshold)))",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G (provideHealthUpdate & (selfRecoveryStrategyConfidence > acceptableThreshold)))",
            "ftInfBtwExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(G (provideHealthUpdate & (selfRecoveryStrategyConfidence > acceptableThreshold)))",
            "ftFinBtwExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "(LAST V (provideHealthUpdate & (selfRecoveryStrategyConfidence > acceptableThreshold)))",
            "CoCoSpecCode_fetched": "(H($post_condition_coco$))",
            "CoCoSpecCode": "(H((provideHealthUpdate and (selfRecoveryStrategyConfidence > acceptableThreshold))))",
            "component": "Robot"
        },
        "_id": "23a0e118-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.038",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": " R1.04  ``If things are proceeding according to plan, you need very little directional information. If they're not, then you suddenly want to dig in and get back into micromanaging\" ",
        "comments": "",
        "fulltext": "if unexpectedCondition Robot shall immediately satisfy notifyUsers",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "unexpectedCondition",
                "notifyUsers"
            ],
            "qualifier_word": "if",
            "pre_condition": "(unexpectedCondition)",
            "regular_condition": "(unexpectedCondition)",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "Robot",
            "componentTextRange": [
                23,
                27
            ],
            "timingTextRange": [
                35,
                45
            ],
            "post_condition": "(notifyUsers)",
            "responseTextRange": [
                47,
                65
            ],
            "diagramVariables": "TC = <b><i>(unexpectedCondition)</i></b>, Response = <b><i>(notifyUsers)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(unexpectedCondition)</i></b> is true and any point in the interval where <b><i>(unexpectedCondition)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "unexpectedCondition",
            "regular_condition_unexp_ft": "unexpectedCondition",
            "regular_condition_SMV_pt": "unexpectedCondition",
            "regular_condition_SMV_ft": "unexpectedCondition",
            "regular_condition_coco_smv": "unexpectedCondition",
            "regular_condition_coco": "unexpectedCondition",
            "post_condition_unexp_pt": "notifyUsers",
            "post_condition_unexp_ft": "notifyUsers",
            "post_condition_SMV_pt": "notifyUsers",
            "post_condition_SMV_ft": "notifyUsers",
            "post_condition_coco_smv": "notifyUsers",
            "post_condition_coco": "notifyUsers",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
            "ft": "((LAST V (((! unexpectedCondition) & ((! LAST) & (X unexpectedCondition))) -> (X notifyUsers))) & (unexpectedCondition -> notifyUsers))",
            "pt_fetched": "(H (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) -> $post_condition_unexp_pt$))",
            "pt": "(H ((unexpectedCondition & ((Y (! unexpectedCondition)) | FTP)) -> notifyUsers))",
            "ptExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((unexpectedCondition & ((Y (! unexpectedCondition)) | (! (Y TRUE)))) -> notifyUsers))",
            "ptFinBtwExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptFinBtwExpanded": "(H ((unexpectedCondition & ((Y (! unexpectedCondition)) | (! (Y TRUE)))) -> notifyUsers))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "((LAST V (((! unexpectedCondition) & ((! LAST) & (X unexpectedCondition))) -> (X notifyUsers))) & (unexpectedCondition -> notifyUsers))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "((G (((! unexpectedCondition) & (X unexpectedCondition)) -> (X notifyUsers))) & (unexpectedCondition -> notifyUsers))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfBtwExpanded": "((G (((! unexpectedCondition) & (X unexpectedCondition)) -> (X notifyUsers))) & (unexpectedCondition -> notifyUsers))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftFinBtwExpanded": "((LAST V (((! unexpectedCondition) & ((! LAST) & (X unexpectedCondition))) -> (X notifyUsers))) & (unexpectedCondition -> notifyUsers))",
            "CoCoSpecCode_fetched": "(H(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) => $post_condition_coco$))",
            "CoCoSpecCode": "(H((unexpectedCondition and ((YtoPre( not unexpectedCondition)) or FTP)) => notifyUsers))",
            "component": "Robot"
        },
        "_id": "23a0e119-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.014",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "Explanation must never share critically sensitive information to someone who is not cleared to receive it",
        "comments": "",
        "fulltext": "if !clearance Explanation shall never satisfy shareSensitiveInformation",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "never",
            "response": "satisfaction",
            "variables": [
                "clearance",
                "shareSensitiveInformation"
            ],
            "qualifier_word": "if",
            "pre_condition": "(! clearance)",
            "regular_condition": "(! clearance)",
            "conditionTextRange": [
                0,
                12
            ],
            "component_name": "Explanation",
            "componentTextRange": [
                14,
                24
            ],
            "timingTextRange": [
                32,
                36
            ],
            "post_condition": "(shareSensitiveInformation)",
            "responseTextRange": [
                38,
                70
            ],
            "diagramVariables": "TC = <b><i>(! clearance)</i></b>, Response = <b><i>(shareSensitiveInformation)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(! clearance)</i></b> is true and any point in the interval where <b><i>(! clearance)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must be false at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_never_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(! clearance)",
            "regular_condition_unexp_ft": "(! clearance)",
            "regular_condition_SMV_pt": "(! clearance)",
            "regular_condition_SMV_ft": "(! clearance)",
            "regular_condition_coco_smv": "(! clearance)",
            "regular_condition_coco": "( not clearance)",
            "post_condition_unexp_pt": "shareSensitiveInformation",
            "post_condition_unexp_ft": "shareSensitiveInformation",
            "post_condition_SMV_pt": "shareSensitiveInformation",
            "post_condition_SMV_ft": "shareSensitiveInformation",
            "post_condition_coco_smv": "shareSensitiveInformation",
            "post_condition_coco": "shareSensitiveInformation",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST V (! $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST V (! $post_condition_unexp_ft$))))",
            "ft": "((LAST V (((! (! clearance)) & ((! LAST) & (X (! clearance)))) -> (X (LAST V (! shareSensitiveInformation))))) & ((! clearance) -> (LAST V (! shareSensitiveInformation))))",
            "pt_fetched": "(H ((H (! $regular_condition_unexp_pt$)) | (! $post_condition_unexp_pt$)))",
            "pt": "(H ((H (! (! clearance))) | (! shareSensitiveInformation)))",
            "ptExpanded_fetched": "(H ((H (! $regular_condition_SMV_pt$)) | (! $post_condition_SMV_pt$)))",
            "ptExpanded": "(H ((H clearance) | (! shareSensitiveInformation)))",
            "ptFinBtwExpanded_fetched": "(H ((H (! $regular_condition_SMV_pt$)) | (! $post_condition_SMV_pt$)))",
            "ptFinBtwExpanded": "(H ((H (! (! clearance))) | (! shareSensitiveInformation)))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST V (! $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST V (! $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V (((! (! clearance)) & ((! LAST) & (X (! clearance)))) -> (X (LAST V (! shareSensitiveInformation))))) & ((! clearance) -> (LAST V (! shareSensitiveInformation))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (G (! $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (G (! $post_condition_SMV_ft$))))",
            "ftInfAUExpanded": "((G (((! (! clearance)) & (X (! clearance))) -> (X (G (! shareSensitiveInformation))))) & ((! clearance) -> (G (! shareSensitiveInformation))))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (G (! $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (G (! $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G (((! (! clearance)) & (X (! clearance))) -> (X (G (! shareSensitiveInformation))))) & ((! clearance) -> (G (! shareSensitiveInformation))))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST V (! $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST V (! $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V (((! (! clearance)) & ((! LAST) & (X (! clearance)))) -> (X (LAST V (! shareSensitiveInformation))))) & ((! clearance) -> (LAST V (! shareSensitiveInformation))))",
            "CoCoSpecCode_fetched": "(H((H( not $regular_condition_coco$)) or ( not $post_condition_coco$)))",
            "CoCoSpecCode": "(H((H( not ( not clearance))) or ( not shareSensitiveInformation)))",
            "component": "Explanation"
        },
        "_id": "23a0e11a-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.006",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "The robot should give rationale behind assessments",
        "comments": "",
        "fulltext": "upon assessment Robot shall at the next timepoint satisfy provideReason",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "assessment",
                "provideReason"
            ],
            "qualifier_word": "upon",
            "pre_condition": "(assessment)",
            "regular_condition": "(assessment)",
            "conditionTextRange": [
                0,
                14
            ],
            "component_name": "Robot",
            "componentTextRange": [
                16,
                20
            ],
            "timingTextRange": [
                28,
                48
            ],
            "post_condition": "(provideReason)",
            "responseTextRange": [
                50,
                70
            ],
            "diagramVariables": "TC = <b><i>(assessment)</i></b>, Response = <b><i>(provideReason)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(assessment)</i></b> is true and any point in the interval where <b><i>(assessment)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "assessment",
            "regular_condition_unexp_ft": "assessment",
            "regular_condition_SMV_pt": "assessment",
            "regular_condition_SMV_ft": "assessment",
            "regular_condition_coco_smv": "assessment",
            "regular_condition_coco": "assessment",
            "post_condition_unexp_pt": "provideReason",
            "post_condition_unexp_ft": "provideReason",
            "post_condition_SMV_pt": "provideReason",
            "post_condition_SMV_ft": "provideReason",
            "post_condition_coco_smv": "provideReason",
            "post_condition_coco": "provideReason",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
            "ft": "((LAST V (((! assessment) & ((! LAST) & (X assessment))) -> (X (LAST | (X provideReason))))) & (assessment -> (LAST | (X provideReason))))",
            "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
            "pt": "(H ((Y (assessment & ((Y (! assessment)) | FTP))) -> (provideReason | FTP)))",
            "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
            "ptExpanded": "(H ((Y (assessment & ((Y (! assessment)) | (! (Y TRUE))))) -> (provideReason | (! (Y TRUE)))))",
            "ptFinBtwExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
            "ptFinBtwExpanded": "(H ((Y (assessment & ((Y (! assessment)) | (! (Y TRUE))))) -> (provideReason | (! (Y TRUE)))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V (((! assessment) & ((! LAST) & (X assessment))) -> (X (LAST | (X provideReason))))) & (assessment -> (LAST | (X provideReason))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! assessment) & (X assessment)) -> (X (X provideReason)))) & (assessment -> (X provideReason)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! assessment) & (X assessment)) -> (X (X provideReason)))) & (assessment -> (X provideReason)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V (((! assessment) & ((! LAST) & (X assessment))) -> (X (LAST | (X provideReason))))) & (assessment -> (LAST | (X provideReason))))",
            "CoCoSpecCode_fetched": "(H((YtoPre($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP))) => ($post_condition_coco$ or FTP)))",
            "CoCoSpecCode": "(H((YtoPre(assessment and ((YtoPre( not assessment)) or FTP))) => (provideReason or FTP)))",
            "component": "Robot"
        },
        "_id": "23a0e11b-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.049",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "R3.08 ``One thing that is critical is knowing what the total dose is going to be until it reaches that point... you need to combine things like navigation intricacies with factors like dose rate or obstacles and that kind of thing and the robot needs to dynamically adapt to that.\"",
        "comments": "",
        "fulltext": "Robot shall always satisfy sampleDoseRate & avoidObstacles & minimiseRadRisk",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "sampleDoseRate",
                "avoidObstacles",
                "minimiseRadRisk"
            ],
            "component_name": "Robot",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(sampleDoseRate & avoidObstacles & minimiseRadRisk)",
            "responseTextRange": [
                19,
                75
            ],
            "diagramVariables": "Response = <b><i>(sampleDoseRate & avoidObstacles & minimiseRadRisk)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "((sampleDoseRate & avoidObstacles) & minimiseRadRisk)",
            "post_condition_unexp_ft": "((sampleDoseRate & avoidObstacles) & minimiseRadRisk)",
            "post_condition_SMV_pt": "((sampleDoseRate & avoidObstacles) & minimiseRadRisk)",
            "post_condition_SMV_ft": "((sampleDoseRate & avoidObstacles) & minimiseRadRisk)",
            "post_condition_coco_smv": "((sampleDoseRate & avoidObstacles) & minimiseRadRisk)",
            "post_condition_coco": "((sampleDoseRate and avoidObstacles) and minimiseRadRisk)",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V ((sampleDoseRate & avoidObstacles) & minimiseRadRisk))",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H ((sampleDoseRate & avoidObstacles) & minimiseRadRisk))",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H ((sampleDoseRate & avoidObstacles) & minimiseRadRisk))",
            "ptFinBtwExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(H ((sampleDoseRate & avoidObstacles) & minimiseRadRisk))",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpanded": "(LAST V ((sampleDoseRate & avoidObstacles) & minimiseRadRisk))",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G ((sampleDoseRate & avoidObstacles) & minimiseRadRisk))",
            "ftInfBtwExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(G ((sampleDoseRate & avoidObstacles) & minimiseRadRisk))",
            "ftFinBtwExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "(LAST V ((sampleDoseRate & avoidObstacles) & minimiseRadRisk))",
            "CoCoSpecCode_fetched": "(H($post_condition_coco$))",
            "CoCoSpecCode": "(H(((sampleDoseRate and avoidObstacles) and minimiseRadRisk)))",
            "component": "Robot"
        },
        "_id": "23a0e11c-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.023",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": " If a problem occurs, explain ",
        "comments": "",
        "fulltext": "if problemDetected Robot shall eventually satisfy explain",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "eventually",
            "response": "satisfaction",
            "variables": [
                "problemDetected",
                "explain"
            ],
            "qualifier_word": "if",
            "pre_condition": "(problemDetected)",
            "regular_condition": "(problemDetected)",
            "conditionTextRange": [
                0,
                17
            ],
            "component_name": "Robot",
            "componentTextRange": [
                19,
                23
            ],
            "timingTextRange": [
                31,
                40
            ],
            "post_condition": "(explain)",
            "responseTextRange": [
                42,
                56
            ],
            "diagramVariables": "TC = <b><i>(problemDetected)</i></b>, Response = <b><i>(explain)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(problemDetected)</i></b> is true and any point in the interval where <b><i>(problemDetected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_eventually_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "problemDetected",
            "regular_condition_unexp_ft": "problemDetected",
            "regular_condition_SMV_pt": "problemDetected",
            "regular_condition_SMV_ft": "problemDetected",
            "regular_condition_coco_smv": "problemDetected",
            "regular_condition_coco": "problemDetected",
            "post_condition_unexp_pt": "explain",
            "post_condition_unexp_ft": "explain",
            "post_condition_SMV_pt": "explain",
            "post_condition_SMV_ft": "explain",
            "post_condition_coco_smv": "explain",
            "post_condition_coco": "explain",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! problemDetected) & ((! LAST) & (X problemDetected))) -> (X ((! LAST) U explain)))) & (problemDetected -> ((! LAST) U explain)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! problemDetected)) | (! ((! explain) S ((! explain) & (problemDetected & ((Y (! problemDetected)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! problemDetected)) | (! ((! explain) S ((! explain) & (problemDetected & ((Y (! problemDetected)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! problemDetected)) | (! ((! explain) S ((! explain) & (problemDetected & ((Y (! problemDetected)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! problemDetected) & ((! LAST) & (X problemDetected))) -> (X ((! LAST) U explain)))) & (problemDetected -> ((! LAST) U explain)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! problemDetected) & (X problemDetected)) -> (X (F explain)))) & (problemDetected -> (F explain)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! problemDetected) & (X problemDetected)) -> (X (F explain)))) & (problemDetected -> (F explain)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! problemDetected) & ((! LAST) & (X problemDetected))) -> (X ((! LAST) U explain)))) & (problemDetected -> ((! LAST) U explain)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not problemDetected)) or ( not (SI( (problemDetected and ((YtoPre( not problemDetected)) or FTP)), ( not explain) ))))",
            "component": "Robot"
        },
        "_id": "23a0e11d-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.026",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": " Explain if unexpected obstacle ",
        "comments": "",
        "fulltext": "If unexpectedObstacle, Robot shall satisfy Explain",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "unexpectedObstacle",
                "Explain"
            ],
            "qualifier_word": "if",
            "pre_condition": "(unexpectedObstacle)",
            "regular_condition": "(unexpectedObstacle)",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "Robot",
            "componentTextRange": [
                23,
                27
            ],
            "post_condition": "(Explain)",
            "responseTextRange": [
                35,
                49
            ],
            "diagramVariables": "TC = <b><i>(unexpectedObstacle)</i></b>, Response = <b><i>(Explain)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(unexpectedObstacle)</i></b> is true and any point in the interval where <b><i>(unexpectedObstacle)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "unexpectedObstacle",
            "regular_condition_unexp_ft": "unexpectedObstacle",
            "regular_condition_SMV_pt": "unexpectedObstacle",
            "regular_condition_SMV_ft": "unexpectedObstacle",
            "regular_condition_coco_smv": "unexpectedObstacle",
            "regular_condition_coco": "unexpectedObstacle",
            "post_condition_unexp_pt": "Explain",
            "post_condition_unexp_ft": "Explain",
            "post_condition_SMV_pt": "Explain",
            "post_condition_SMV_ft": "Explain",
            "post_condition_coco_smv": "Explain",
            "post_condition_coco": "Explain",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X ((! LAST) U $post_condition_unexp_ft$)))) & ($regular_condition_unexp_ft$ -> ((! LAST) U $post_condition_unexp_ft$)))",
            "ft": "((LAST V (((! unexpectedObstacle) & ((! LAST) & (X unexpectedObstacle))) -> (X ((! LAST) U Explain)))) & (unexpectedObstacle -> ((! LAST) U Explain)))",
            "pt_fetched": "((H (! $regular_condition_unexp_pt$)) | (! ((! $post_condition_unexp_pt$) S ((! $post_condition_unexp_pt$) & ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))))))",
            "pt": "((H (! unexpectedObstacle)) | (! ((! Explain) S ((! Explain) & (unexpectedObstacle & ((Y (! unexpectedObstacle)) | FTP))))))",
            "ptExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptExpanded": "((H (! unexpectedObstacle)) | (! ((! Explain) S ((! Explain) & (unexpectedObstacle & ((Y (! unexpectedObstacle)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded_fetched": "((H (! $regular_condition_SMV_pt$)) | (! ((! $post_condition_SMV_pt$) S ((! $post_condition_SMV_pt$) & ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))))))",
            "ptFinBtwExpanded": "((H (! unexpectedObstacle)) | (! ((! Explain) S ((! Explain) & (unexpectedObstacle & ((Y (! unexpectedObstacle)) | (! (Y TRUE))))))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftExpanded": "((LAST V (((! unexpectedObstacle) & ((! LAST) & (X unexpectedObstacle))) -> (X ((! LAST) U Explain)))) & (unexpectedObstacle -> ((! LAST) U Explain)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! unexpectedObstacle) & (X unexpectedObstacle)) -> (X (F Explain)))) & (unexpectedObstacle -> (F Explain)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (F $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (F $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! unexpectedObstacle) & (X unexpectedObstacle)) -> (X (F Explain)))) & (unexpectedObstacle -> (F Explain)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X ((! LAST) U $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> ((! LAST) U $post_condition_SMV_ft$)))",
            "ftFinBtwExpanded": "((LAST V (((! unexpectedObstacle) & ((! LAST) & (X unexpectedObstacle))) -> (X ((! LAST) U Explain)))) & (unexpectedObstacle -> ((! LAST) U Explain)))",
            "CoCoSpecCode_fetched": "((H( not $regular_condition_coco$)) or ( not (SI( ($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)), ( not $post_condition_coco$) ))))",
            "CoCoSpecCode": "((H( not unexpectedObstacle)) or ( not (SI( (unexpectedObstacle and ((YtoPre( not unexpectedObstacle)) or FTP)), ( not Explain) ))))",
            "component": "Robot"
        },
        "_id": "23a0e11e-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.050",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "R4.01 If the robot aborts a task, it should explain why",
        "comments": "",
        "fulltext": "if abort Robot shall immediately satisfy explain",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "abort",
                "explain"
            ],
            "qualifier_word": "if",
            "pre_condition": "(abort)",
            "regular_condition": "(abort)",
            "conditionTextRange": [
                0,
                7
            ],
            "component_name": "Robot",
            "componentTextRange": [
                9,
                13
            ],
            "timingTextRange": [
                21,
                31
            ],
            "post_condition": "(explain)",
            "responseTextRange": [
                33,
                47
            ],
            "diagramVariables": "TC = <b><i>(abort)</i></b>, Response = <b><i>(explain)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(abort)</i></b> is true and any point in the interval where <b><i>(abort)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "abort",
            "regular_condition_unexp_ft": "abort",
            "regular_condition_SMV_pt": "abort",
            "regular_condition_SMV_ft": "abort",
            "regular_condition_coco_smv": "abort",
            "regular_condition_coco": "abort",
            "post_condition_unexp_pt": "explain",
            "post_condition_unexp_ft": "explain",
            "post_condition_SMV_pt": "explain",
            "post_condition_SMV_ft": "explain",
            "post_condition_coco_smv": "explain",
            "post_condition_coco": "explain",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
            "ft": "((LAST V (((! abort) & ((! LAST) & (X abort))) -> (X explain))) & (abort -> explain))",
            "pt_fetched": "(H (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) -> $post_condition_unexp_pt$))",
            "pt": "(H ((abort & ((Y (! abort)) | FTP)) -> explain))",
            "ptExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((abort & ((Y (! abort)) | (! (Y TRUE)))) -> explain))",
            "ptFinBtwExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptFinBtwExpanded": "(H ((abort & ((Y (! abort)) | (! (Y TRUE)))) -> explain))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "((LAST V (((! abort) & ((! LAST) & (X abort))) -> (X explain))) & (abort -> explain))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "((G (((! abort) & (X abort)) -> (X explain))) & (abort -> explain))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfBtwExpanded": "((G (((! abort) & (X abort)) -> (X explain))) & (abort -> explain))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftFinBtwExpanded": "((LAST V (((! abort) & ((! LAST) & (X abort))) -> (X explain))) & (abort -> explain))",
            "CoCoSpecCode_fetched": "(H(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) => $post_condition_coco$))",
            "CoCoSpecCode": "(H((abort and ((YtoPre( not abort)) or FTP)) => explain))",
            "component": "Robot"
        },
        "_id": "23a0e11f-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.051",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "R4.02 ``I want to know why there's a 90\\% probability of completing. What is the variable in there, there's something that could change, that could stop it from being completed?\"",
        "comments": "",
        "fulltext": "when probComplete >= p Robot shall immediately satisfy returnUncertaintyVariables & explain",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "probComplete",
                "p",
                "returnUncertaintyVariables",
                "explain"
            ],
            "qualifier_word": "when",
            "pre_condition": "(probComplete >= p)",
            "regular_condition": "(probComplete >= p)",
            "conditionTextRange": [
                0,
                21
            ],
            "component_name": "Robot",
            "componentTextRange": [
                23,
                27
            ],
            "timingTextRange": [
                35,
                45
            ],
            "post_condition": "(returnUncertaintyVariables & explain)",
            "responseTextRange": [
                47,
                90
            ],
            "diagramVariables": "TC = <b><i>(probComplete >= p)</i></b>, Response = <b><i>(returnUncertaintyVariables & explain)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(probComplete >= p)</i></b> is true and any point in the interval where <b><i>(probComplete >= p)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(probComplete >= p)",
            "regular_condition_unexp_ft": "(probComplete >= p)",
            "regular_condition_SMV_pt": "(probComplete >= p)",
            "regular_condition_SMV_ft": "(probComplete >= p)",
            "regular_condition_coco_smv": "(probComplete >= p)",
            "regular_condition_coco": "(probComplete >= p)",
            "post_condition_unexp_pt": "(returnUncertaintyVariables & explain)",
            "post_condition_unexp_ft": "(returnUncertaintyVariables & explain)",
            "post_condition_SMV_pt": "(returnUncertaintyVariables & explain)",
            "post_condition_SMV_ft": "(returnUncertaintyVariables & explain)",
            "post_condition_coco_smv": "(returnUncertaintyVariables & explain)",
            "post_condition_coco": "(returnUncertaintyVariables and explain)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
            "ft": "((LAST V (((! (probComplete >= p)) & ((! LAST) & (X (probComplete >= p)))) -> (X (returnUncertaintyVariables & explain)))) & ((probComplete >= p) -> (returnUncertaintyVariables & explain)))",
            "pt_fetched": "(H (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) -> $post_condition_unexp_pt$))",
            "pt": "(H (((probComplete >= p) & ((Y (! (probComplete >= p))) | FTP)) -> (returnUncertaintyVariables & explain)))",
            "ptExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H (((probComplete >= p) & ((Y (! (probComplete >= p))) | (! (Y TRUE)))) -> (returnUncertaintyVariables & explain)))",
            "ptFinBtwExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptFinBtwExpanded": "(H (((probComplete >= p) & ((Y (! (probComplete >= p))) | (! (Y TRUE)))) -> (returnUncertaintyVariables & explain)))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "((LAST V (((! (probComplete >= p)) & ((! LAST) & (X (probComplete >= p)))) -> (X (returnUncertaintyVariables & explain)))) & ((probComplete >= p) -> (returnUncertaintyVariables & explain)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "((G (((! (probComplete >= p)) & (X (probComplete >= p))) -> (X (returnUncertaintyVariables & explain)))) & ((probComplete >= p) -> (returnUncertaintyVariables & explain)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfBtwExpanded": "((G (((! (probComplete >= p)) & (X (probComplete >= p))) -> (X (returnUncertaintyVariables & explain)))) & ((probComplete >= p) -> (returnUncertaintyVariables & explain)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftFinBtwExpanded": "((LAST V (((! (probComplete >= p)) & ((! LAST) & (X (probComplete >= p)))) -> (X (returnUncertaintyVariables & explain)))) & ((probComplete >= p) -> (returnUncertaintyVariables & explain)))",
            "CoCoSpecCode_fetched": "(H(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) => $post_condition_coco$))",
            "CoCoSpecCode": "(H(((probComplete >= p) and ((YtoPre( not (probComplete >= p))) or FTP)) => (returnUncertaintyVariables and explain)))",
            "component": "Robot"
        },
        "_id": "23a0e120-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.039",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": " R1.05 ``So in that scenario I’d want to immediately know that there’s an off normal condition, so that off normal condition can be that something unexpected has happened. What I would want it to do is to absolutely guarantee that it always fails safe\" ",
        "comments": "",
        "fulltext": "Robot shall always satisfy failureDetected => explainOffNormal & failSafe",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "failureDetected",
                "explainOffNormal",
                "failSafe"
            ],
            "component_name": "Robot",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(failureDetected => explainOffNormal & failSafe)",
            "responseTextRange": [
                19,
                72
            ],
            "diagramVariables": "Response = <b><i>(failureDetected => explainOffNormal & failSafe)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(failureDetected -> (explainOffNormal & failSafe))",
            "post_condition_unexp_ft": "(failureDetected -> (explainOffNormal & failSafe))",
            "post_condition_SMV_pt": "(failureDetected -> (explainOffNormal & failSafe))",
            "post_condition_SMV_ft": "(failureDetected -> (explainOffNormal & failSafe))",
            "post_condition_coco_smv": "(failureDetected -> (explainOffNormal & failSafe))",
            "post_condition_coco": "(failureDetected => (explainOffNormal and failSafe))",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V (failureDetected -> (explainOffNormal & failSafe)))",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H (failureDetected -> (explainOffNormal & failSafe)))",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H (failureDetected -> (explainOffNormal & failSafe)))",
            "ptFinBtwExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(H (failureDetected -> (explainOffNormal & failSafe)))",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpanded": "(LAST V (failureDetected -> (explainOffNormal & failSafe)))",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G (failureDetected -> (explainOffNormal & failSafe)))",
            "ftInfBtwExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(G (failureDetected -> (explainOffNormal & failSafe)))",
            "ftFinBtwExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "(LAST V (failureDetected -> (explainOffNormal & failSafe)))",
            "CoCoSpecCode_fetched": "(H($post_condition_coco$))",
            "CoCoSpecCode": "(H((failureDetected => (explainOffNormal and failSafe))))",
            "component": "Robot"
        },
        "_id": "23a0e121-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.007",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": " If the robot avoids certain areas, it should explain why",
        "comments": "",
        "fulltext": "if areaAvoided Robot shall immediately satisfy explain",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "areaAvoided",
                "explain"
            ],
            "qualifier_word": "if",
            "pre_condition": "(areaAvoided)",
            "regular_condition": "(areaAvoided)",
            "conditionTextRange": [
                0,
                13
            ],
            "component_name": "Robot",
            "componentTextRange": [
                15,
                19
            ],
            "timingTextRange": [
                27,
                37
            ],
            "post_condition": "(explain)",
            "responseTextRange": [
                39,
                53
            ],
            "diagramVariables": "TC = <b><i>(areaAvoided)</i></b>, Response = <b><i>(explain)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(areaAvoided)</i></b> is true and any point in the interval where <b><i>(areaAvoided)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "areaAvoided",
            "regular_condition_unexp_ft": "areaAvoided",
            "regular_condition_SMV_pt": "areaAvoided",
            "regular_condition_SMV_ft": "areaAvoided",
            "regular_condition_coco_smv": "areaAvoided",
            "regular_condition_coco": "areaAvoided",
            "post_condition_unexp_pt": "explain",
            "post_condition_unexp_ft": "explain",
            "post_condition_SMV_pt": "explain",
            "post_condition_SMV_ft": "explain",
            "post_condition_coco_smv": "explain",
            "post_condition_coco": "explain",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
            "ft": "((LAST V (((! areaAvoided) & ((! LAST) & (X areaAvoided))) -> (X explain))) & (areaAvoided -> explain))",
            "pt_fetched": "(H (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) -> $post_condition_unexp_pt$))",
            "pt": "(H ((areaAvoided & ((Y (! areaAvoided)) | FTP)) -> explain))",
            "ptExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((areaAvoided & ((Y (! areaAvoided)) | (! (Y TRUE)))) -> explain))",
            "ptFinBtwExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptFinBtwExpanded": "(H ((areaAvoided & ((Y (! areaAvoided)) | (! (Y TRUE)))) -> explain))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "((LAST V (((! areaAvoided) & ((! LAST) & (X areaAvoided))) -> (X explain))) & (areaAvoided -> explain))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "((G (((! areaAvoided) & (X areaAvoided)) -> (X explain))) & (areaAvoided -> explain))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfBtwExpanded": "((G (((! areaAvoided) & (X areaAvoided)) -> (X explain))) & (areaAvoided -> explain))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftFinBtwExpanded": "((LAST V (((! areaAvoided) & ((! LAST) & (X areaAvoided))) -> (X explain))) & (areaAvoided -> explain))",
            "CoCoSpecCode_fetched": "(H(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) => $post_condition_coco$))",
            "CoCoSpecCode": "(H((areaAvoided and ((YtoPre( not areaAvoided)) or FTP)) => explain))",
            "component": "Robot"
        },
        "_id": "23a0e122-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.024",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "If task priorities occur that change the plan, explain ",
        "comments": "",
        "fulltext": "if priorities=>changePlan Robot shall at the next timepoint satisfy explain",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "priorities",
                "changePlan",
                "explain"
            ],
            "qualifier_word": "if",
            "pre_condition": "(priorities => changePlan)",
            "regular_condition": "(priorities => changePlan)",
            "conditionTextRange": [
                0,
                24
            ],
            "component_name": "Robot",
            "componentTextRange": [
                26,
                30
            ],
            "timingTextRange": [
                38,
                58
            ],
            "post_condition": "(explain)",
            "responseTextRange": [
                60,
                74
            ],
            "diagramVariables": "TC = <b><i>(priorities => changePlan)</i></b>, Response = <b><i>(explain)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(priorities => changePlan)</i></b> is true and any point in the interval where <b><i>(priorities => changePlan)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(priorities -> changePlan)",
            "regular_condition_unexp_ft": "(priorities -> changePlan)",
            "regular_condition_SMV_pt": "(priorities -> changePlan)",
            "regular_condition_SMV_ft": "(priorities -> changePlan)",
            "regular_condition_coco_smv": "(priorities -> changePlan)",
            "regular_condition_coco": "(priorities => changePlan)",
            "post_condition_unexp_pt": "explain",
            "post_condition_unexp_ft": "explain",
            "post_condition_SMV_pt": "explain",
            "post_condition_SMV_ft": "explain",
            "post_condition_coco_smv": "explain",
            "post_condition_coco": "explain",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
            "ft": "((LAST V (((! (priorities -> changePlan)) & ((! LAST) & (X (priorities -> changePlan)))) -> (X (LAST | (X explain))))) & ((priorities -> changePlan) -> (LAST | (X explain))))",
            "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
            "pt": "(H ((Y ((priorities -> changePlan) & ((Y (! (priorities -> changePlan))) | FTP))) -> (explain | FTP)))",
            "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
            "ptExpanded": "(H ((Y ((priorities -> changePlan) & ((Y (! (priorities -> changePlan))) | (! (Y TRUE))))) -> (explain | (! (Y TRUE)))))",
            "ptFinBtwExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
            "ptFinBtwExpanded": "(H ((Y ((priorities -> changePlan) & ((Y (! (priorities -> changePlan))) | (! (Y TRUE))))) -> (explain | (! (Y TRUE)))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V (((! (priorities -> changePlan)) & ((! LAST) & (X (priorities -> changePlan)))) -> (X (LAST | (X explain))))) & ((priorities -> changePlan) -> (LAST | (X explain))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (priorities -> changePlan)) & (X (priorities -> changePlan))) -> (X (X explain)))) & ((priorities -> changePlan) -> (X explain)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (priorities -> changePlan)) & (X (priorities -> changePlan))) -> (X (X explain)))) & ((priorities -> changePlan) -> (X explain)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V (((! (priorities -> changePlan)) & ((! LAST) & (X (priorities -> changePlan)))) -> (X (LAST | (X explain))))) & ((priorities -> changePlan) -> (LAST | (X explain))))",
            "CoCoSpecCode_fetched": "(H((YtoPre($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP))) => ($post_condition_coco$ or FTP)))",
            "CoCoSpecCode": "(H((YtoPre((priorities => changePlan) and ((YtoPre( not (priorities => changePlan))) or FTP))) => (explain or FTP)))",
            "component": "Robot"
        },
        "_id": "23a0e123-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.025",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "Explain probability of task completion and why ",
        "comments": "",
        "fulltext": "Robot shall always satisfy explainTaskProbability",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "explainTaskProbability"
            ],
            "component_name": "Robot",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(explainTaskProbability)",
            "responseTextRange": [
                19,
                48
            ],
            "diagramVariables": "Response = <b><i>(explainTaskProbability)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "explainTaskProbability",
            "post_condition_unexp_ft": "explainTaskProbability",
            "post_condition_SMV_pt": "explainTaskProbability",
            "post_condition_SMV_ft": "explainTaskProbability",
            "post_condition_coco_smv": "explainTaskProbability",
            "post_condition_coco": "explainTaskProbability",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V explainTaskProbability)",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H explainTaskProbability)",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H explainTaskProbability)",
            "ptFinBtwExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(H explainTaskProbability)",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpanded": "(LAST V explainTaskProbability)",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G explainTaskProbability)",
            "ftInfBtwExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(G explainTaskProbability)",
            "ftFinBtwExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "(LAST V explainTaskProbability)",
            "CoCoSpecCode_fetched": "(H($post_condition_coco$))",
            "CoCoSpecCode": "(H(explainTaskProbability))",
            "component": "Robot"
        },
        "_id": "23a0e124-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.001",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "The robot should explain why it thinks it's health meets the threshold to begin the mission",
        "comments": "",
        "fulltext": "Robot shall before mission satisfy explainHealth",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "mission",
                "explainHealth"
            ],
            "component_name": "Robot",
            "componentTextRange": [
                0,
                4
            ],
            "stop_condition": "(mission)",
            "timingTextRange": [
                12,
                25
            ],
            "post_condition": "(explainHealth)",
            "responseTextRange": [
                27,
                47
            ],
            "diagramVariables": "SC = <b><i>(mission)</i></b>, Response = <b><i>(explainHealth)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisified.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "explainHealth",
            "post_condition_unexp_ft": "explainHealth",
            "post_condition_SMV_pt": "explainHealth",
            "post_condition_SMV_ft": "explainHealth",
            "post_condition_coco_smv": "explainHealth",
            "post_condition_coco": "explainHealth",
            "stop_condition_unexp_pt": "mission",
            "stop_condition_unexp_ft": "mission",
            "stop_condition_SMV_pt": "mission",
            "stop_condition_SMV_ft": "mission",
            "stop_condition_coco_smv": "mission",
            "stop_condition_coco": "mission",
            "ft_fetched": "(($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))",
            "ft": "((explainHealth | LAST) V (! mission))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((! FTP) & (Y (O $post_condition_unexp_pt$)))))",
            "pt": "(H (mission -> ((! FTP) & (Y (O explainHealth)))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((Y TRUE) & (Y (O $post_condition_SMV_pt$)))))",
            "ptExpanded": "(H (mission -> (Y (O explainHealth))))",
            "ptFinBtwExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((Y TRUE) & (Y (O $post_condition_SMV_pt$)))))",
            "ptFinBtwExpanded": "(H (mission -> ((Y TRUE) & (Y (O explainHealth)))))",
            "ftExpanded_fetched": "(($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))",
            "ftExpanded": "((explainHealth | LAST) V (! mission))",
            "ftInfAUExpanded_fetched": "($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))",
            "ftInfAUExpanded": "(explainHealth V (! mission))",
            "ftInfBtwExpanded_fetched": "($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))",
            "ftInfBtwExpanded": "(explainHealth V (! mission))",
            "ftFinBtwExpanded_fetched": "(($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))",
            "ftFinBtwExpanded": "((explainHealth | LAST) V (! mission))",
            "CoCoSpecCode_fetched": "(H($stop_condition_coco$ => (( not FTP) and (YtoPre(O($post_condition_coco$))))))",
            "CoCoSpecCode": "(H(mission => (( not FTP) and (YtoPre(O(explainHealth))))))",
            "component": "Robot"
        },
        "_id": "23a0e125-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.040",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "R2.01  ``I think in our job there’s going to always be more detail because we’re going to have to interpret and understand why it's done something so I think my guess is we would need much more information than an operator\" ",
        "comments": "",
        "fulltext": "in developer mode Robot shall always satisfy produceDetailedExplanation",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "developer",
                "produceDetailedExplanation"
            ],
            "scope_mode": "developer",
            "scopeTextRange": [
                0,
                16
            ],
            "component_name": "Robot",
            "componentTextRange": [
                18,
                22
            ],
            "timingTextRange": [
                30,
                35
            ],
            "post_condition": "(produceDetailedExplanation)",
            "responseTextRange": [
                37,
                70
            ],
            "diagramVariables": "M = <b><i>developer</i></b>,, Response = <b><i>(produceDetailedExplanation)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>developer</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "developer",
            "scope_mode_coco": "developer",
            "scope_mode_ft": "developer",
            "post_condition_unexp_pt": "produceDetailedExplanation",
            "post_condition_unexp_ft": "produceDetailedExplanation",
            "post_condition_SMV_pt": "produceDetailedExplanation",
            "post_condition_SMV_ft": "produceDetailedExplanation",
            "post_condition_coco_smv": "produceDetailedExplanation",
            "post_condition_coco": "produceDetailedExplanation",
            "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V (developer -> produceDetailedExplanation))",
            "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H (developer -> produceDetailedExplanation))",
            "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H (developer -> produceDetailedExplanation))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ($post_condition_SMV_pt$ S ($post_condition_SMV_pt$ & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! developer) & (Y developer)) -> (Y (produceDetailedExplanation S (produceDetailedExplanation & (developer & ((! (Y TRUE)) | (Y (! developer)))))))))",
            "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "(LAST V (developer -> produceDetailedExplanation))",
            "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G (developer -> produceDetailedExplanation))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! developer) ) & (X developer))) | (X ((F ((developer ) & (X (! developer)))) -> (((developer ) & (X (! developer))) V produceDetailedExplanation))))) & (developer -> ((F ((developer ) & (X (! developer)))) -> (((developer ) & (X (! developer))) V produceDetailedExplanation))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! developer) & (! LAST)) & (X developer)) & (! LAST))) | (X (((! LAST) U ((developer & (! LAST)) & (X (! developer)))) -> (((developer & (! LAST)) & (X (! developer))) V produceDetailedExplanation))))) & (developer -> (((! LAST) U ((developer & (! LAST)) & (X (! developer)))) -> (((developer & (! LAST)) & (X (! developer))) V produceDetailedExplanation))))",
            "CoCoSpecCode_fetched": "(H($scope_mode_coco$ => $post_condition_coco$))",
            "CoCoSpecCode": "(H(developer => produceDetailedExplanation))",
            "component": "Robot"
        },
        "_id": "23a0e126-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.027",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": " Explain if time constraints change plan",
        "comments": "",
        "fulltext": "if timeConstraints=>changePlan Robot shall at the next timepoint satisfy explain",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "timeConstraints",
                "changePlan",
                "explain"
            ],
            "qualifier_word": "if",
            "pre_condition": "(timeConstraints => changePlan)",
            "regular_condition": "(timeConstraints => changePlan)",
            "conditionTextRange": [
                0,
                29
            ],
            "component_name": "Robot",
            "componentTextRange": [
                31,
                35
            ],
            "timingTextRange": [
                43,
                63
            ],
            "post_condition": "(explain)",
            "responseTextRange": [
                65,
                79
            ],
            "diagramVariables": "TC = <b><i>(timeConstraints => changePlan)</i></b>, Response = <b><i>(explain)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(timeConstraints => changePlan)</i></b> is true and any point in the interval where <b><i>(timeConstraints => changePlan)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(timeConstraints -> changePlan)",
            "regular_condition_unexp_ft": "(timeConstraints -> changePlan)",
            "regular_condition_SMV_pt": "(timeConstraints -> changePlan)",
            "regular_condition_SMV_ft": "(timeConstraints -> changePlan)",
            "regular_condition_coco_smv": "(timeConstraints -> changePlan)",
            "regular_condition_coco": "(timeConstraints => changePlan)",
            "post_condition_unexp_pt": "explain",
            "post_condition_unexp_ft": "explain",
            "post_condition_SMV_pt": "explain",
            "post_condition_SMV_ft": "explain",
            "post_condition_coco_smv": "explain",
            "post_condition_coco": "explain",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
            "ft": "((LAST V (((! (timeConstraints -> changePlan)) & ((! LAST) & (X (timeConstraints -> changePlan)))) -> (X (LAST | (X explain))))) & ((timeConstraints -> changePlan) -> (LAST | (X explain))))",
            "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
            "pt": "(H ((Y ((timeConstraints -> changePlan) & ((Y (! (timeConstraints -> changePlan))) | FTP))) -> (explain | FTP)))",
            "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
            "ptExpanded": "(H ((Y ((timeConstraints -> changePlan) & ((Y (! (timeConstraints -> changePlan))) | (! (Y TRUE))))) -> (explain | (! (Y TRUE)))))",
            "ptFinBtwExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
            "ptFinBtwExpanded": "(H ((Y ((timeConstraints -> changePlan) & ((Y (! (timeConstraints -> changePlan))) | (! (Y TRUE))))) -> (explain | (! (Y TRUE)))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V (((! (timeConstraints -> changePlan)) & ((! LAST) & (X (timeConstraints -> changePlan)))) -> (X (LAST | (X explain))))) & ((timeConstraints -> changePlan) -> (LAST | (X explain))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (timeConstraints -> changePlan)) & (X (timeConstraints -> changePlan))) -> (X (X explain)))) & ((timeConstraints -> changePlan) -> (X explain)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (timeConstraints -> changePlan)) & (X (timeConstraints -> changePlan))) -> (X (X explain)))) & ((timeConstraints -> changePlan) -> (X explain)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V (((! (timeConstraints -> changePlan)) & ((! LAST) & (X (timeConstraints -> changePlan)))) -> (X (LAST | (X explain))))) & ((timeConstraints -> changePlan) -> (LAST | (X explain))))",
            "CoCoSpecCode_fetched": "(H((YtoPre($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP))) => ($post_condition_coco$ or FTP)))",
            "CoCoSpecCode": "(H((YtoPre((timeConstraints => changePlan) and ((YtoPre( not (timeConstraints => changePlan))) or FTP))) => (explain or FTP)))",
            "component": "Robot"
        },
        "_id": "23a0e127-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.003",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "The robot should continually assess its health and performance, and assess if it is able to undertake the task, if it decides it is not able to, it should explain why not ",
        "comments": "",
        "fulltext": "Robot shall always satisfy monitorHealth & ((health<threshold) => explain)",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "monitorHealth",
                "health",
                "threshold",
                "explain"
            ],
            "component_name": "Robot",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(monitorHealth & ( ( health < threshold ) => explain ))",
            "responseTextRange": [
                19,
                73
            ],
            "diagramVariables": "Response = <b><i>(monitorHealth & ( ( health < threshold ) => explain ))</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(monitorHealth & ((health < threshold) -> explain))",
            "post_condition_unexp_ft": "(monitorHealth & ((health < threshold) -> explain))",
            "post_condition_SMV_pt": "(monitorHealth & ((health < threshold) -> explain))",
            "post_condition_SMV_ft": "(monitorHealth & ((health < threshold) -> explain))",
            "post_condition_coco_smv": "(monitorHealth & ((health < threshold) -> explain))",
            "post_condition_coco": "(monitorHealth and ((health < threshold) => explain))",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V (monitorHealth & ((health < threshold) -> explain)))",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H (monitorHealth & ((health < threshold) -> explain)))",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H (monitorHealth & ((health < threshold) -> explain)))",
            "ptFinBtwExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(H (monitorHealth & ((health < threshold) -> explain)))",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpanded": "(LAST V (monitorHealth & ((health < threshold) -> explain)))",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G (monitorHealth & ((health < threshold) -> explain)))",
            "ftInfBtwExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(G (monitorHealth & ((health < threshold) -> explain)))",
            "ftFinBtwExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "(LAST V (monitorHealth & ((health < threshold) -> explain)))",
            "CoCoSpecCode_fetched": "(H($post_condition_coco$))",
            "CoCoSpecCode": "(H((monitorHealth and ((health < threshold) => explain))))",
            "component": "Robot"
        },
        "_id": "23a0e128-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.005",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "The robot should explain where it thinks it is located in the environment and why it thinks that",
        "comments": "",
        "fulltext": "Robot shall always satisfy explainLocation & provideReason",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "explainLocation",
                "provideReason"
            ],
            "component_name": "Robot",
            "componentTextRange": [
                0,
                4
            ],
            "timingTextRange": [
                12,
                17
            ],
            "post_condition": "(explainLocation & provideReason)",
            "responseTextRange": [
                19,
                57
            ],
            "diagramVariables": "Response = <b><i>(explainLocation & provideReason)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_always_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(explainLocation & provideReason)",
            "post_condition_unexp_ft": "(explainLocation & provideReason)",
            "post_condition_SMV_pt": "(explainLocation & provideReason)",
            "post_condition_SMV_ft": "(explainLocation & provideReason)",
            "post_condition_coco_smv": "(explainLocation & provideReason)",
            "post_condition_coco": "(explainLocation and provideReason)",
            "ft_fetched": "(LAST V $post_condition_unexp_ft$)",
            "ft": "(LAST V (explainLocation & provideReason))",
            "pt_fetched": "(H $post_condition_unexp_pt$)",
            "pt": "(H (explainLocation & provideReason))",
            "ptExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptExpanded": "(H (explainLocation & provideReason))",
            "ptFinBtwExpanded_fetched": "(H $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(H (explainLocation & provideReason))",
            "ftExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftExpanded": "(LAST V (explainLocation & provideReason))",
            "ftInfAUExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(G (explainLocation & provideReason))",
            "ftInfBtwExpanded_fetched": "(G $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(G (explainLocation & provideReason))",
            "ftFinBtwExpanded_fetched": "(LAST V $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "(LAST V (explainLocation & provideReason))",
            "CoCoSpecCode_fetched": "(H($post_condition_coco$))",
            "CoCoSpecCode": "(H((explainLocation and provideReason)))",
            "component": "Robot"
        },
        "_id": "23a0e129-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.010",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "If something fails, the robot should explain how and why ",
        "comments": "",
        "fulltext": "if failureDetected Robot shall immediately satisfy diagnose & explain",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "failureDetected",
                "diagnose",
                "explain"
            ],
            "qualifier_word": "if",
            "pre_condition": "(failureDetected)",
            "regular_condition": "(failureDetected)",
            "conditionTextRange": [
                0,
                17
            ],
            "component_name": "Robot",
            "componentTextRange": [
                19,
                23
            ],
            "timingTextRange": [
                31,
                41
            ],
            "post_condition": "(diagnose & explain)",
            "responseTextRange": [
                43,
                68
            ],
            "diagramVariables": "TC = <b><i>(failureDetected)</i></b>, Response = <b><i>(diagnose & explain)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(failureDetected)</i></b> is true and any point in the interval where <b><i>(failureDetected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "failureDetected",
            "regular_condition_unexp_ft": "failureDetected",
            "regular_condition_SMV_pt": "failureDetected",
            "regular_condition_SMV_ft": "failureDetected",
            "regular_condition_coco_smv": "failureDetected",
            "regular_condition_coco": "failureDetected",
            "post_condition_unexp_pt": "(diagnose & explain)",
            "post_condition_unexp_ft": "(diagnose & explain)",
            "post_condition_SMV_pt": "(diagnose & explain)",
            "post_condition_SMV_ft": "(diagnose & explain)",
            "post_condition_coco_smv": "(diagnose & explain)",
            "post_condition_coco": "(diagnose and explain)",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
            "ft": "((LAST V (((! failureDetected) & ((! LAST) & (X failureDetected))) -> (X (diagnose & explain)))) & (failureDetected -> (diagnose & explain)))",
            "pt_fetched": "(H (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) -> $post_condition_unexp_pt$))",
            "pt": "(H ((failureDetected & ((Y (! failureDetected)) | FTP)) -> (diagnose & explain)))",
            "ptExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((failureDetected & ((Y (! failureDetected)) | (! (Y TRUE)))) -> (diagnose & explain)))",
            "ptFinBtwExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptFinBtwExpanded": "(H ((failureDetected & ((Y (! failureDetected)) | (! (Y TRUE)))) -> (diagnose & explain)))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "((LAST V (((! failureDetected) & ((! LAST) & (X failureDetected))) -> (X (diagnose & explain)))) & (failureDetected -> (diagnose & explain)))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "((G (((! failureDetected) & (X failureDetected)) -> (X (diagnose & explain)))) & (failureDetected -> (diagnose & explain)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfBtwExpanded": "((G (((! failureDetected) & (X failureDetected)) -> (X (diagnose & explain)))) & (failureDetected -> (diagnose & explain)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftFinBtwExpanded": "((LAST V (((! failureDetected) & ((! LAST) & (X failureDetected))) -> (X (diagnose & explain)))) & (failureDetected -> (diagnose & explain)))",
            "CoCoSpecCode_fetched": "(H(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) => $post_condition_coco$))",
            "CoCoSpecCode": "(H((failureDetected and ((YtoPre( not failureDetected)) or FTP)) => (diagnose and explain)))",
            "component": "Robot"
        },
        "_id": "23a0e12a-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.002",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": " The robot should explain why it thinks it is suitable to undertake the mission",
        "comments": "",
        "fulltext": "Robot shall before mission satisfy explainSuitable",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "before",
            "response": "satisfaction",
            "variables": [
                "mission",
                "explainSuitable"
            ],
            "component_name": "Robot",
            "componentTextRange": [
                0,
                4
            ],
            "stop_condition": "(mission)",
            "timingTextRange": [
                12,
                25
            ],
            "post_condition": "(explainSuitable)",
            "responseTextRange": [
                27,
                49
            ],
            "diagramVariables": "SC = <b><i>(mission)</i></b>, Response = <b><i>(explainSuitable)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at least once strictly before the state where the stop condition holds. If the stop condition never occurs, RES does not need to hold. If the stop condition holds at the trigger, the requirement is not satisified.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_before_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "explainSuitable",
            "post_condition_unexp_ft": "explainSuitable",
            "post_condition_SMV_pt": "explainSuitable",
            "post_condition_SMV_ft": "explainSuitable",
            "post_condition_coco_smv": "explainSuitable",
            "post_condition_coco": "explainSuitable",
            "stop_condition_unexp_pt": "mission",
            "stop_condition_unexp_ft": "mission",
            "stop_condition_SMV_pt": "mission",
            "stop_condition_SMV_ft": "mission",
            "stop_condition_coco_smv": "mission",
            "stop_condition_coco": "mission",
            "ft_fetched": "(($post_condition_unexp_ft$ | LAST) V (! $stop_condition_unexp_ft$))",
            "ft": "((explainSuitable | LAST) V (! mission))",
            "pt_fetched": "(H ($stop_condition_unexp_pt$ -> ((! FTP) & (Y (O $post_condition_unexp_pt$)))))",
            "pt": "(H (mission -> ((! FTP) & (Y (O explainSuitable)))))",
            "ptExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((Y TRUE) & (Y (O $post_condition_SMV_pt$)))))",
            "ptExpanded": "(H (mission -> (Y (O explainSuitable))))",
            "ptFinBtwExpanded_fetched": "(H ($stop_condition_SMV_pt$ -> ((Y TRUE) & (Y (O $post_condition_SMV_pt$)))))",
            "ptFinBtwExpanded": "(H (mission -> ((Y TRUE) & (Y (O explainSuitable)))))",
            "ftExpanded_fetched": "(($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))",
            "ftExpanded": "((explainSuitable | LAST) V (! mission))",
            "ftInfAUExpanded_fetched": "($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))",
            "ftInfAUExpanded": "(explainSuitable V (! mission))",
            "ftInfBtwExpanded_fetched": "($post_condition_SMV_ft$ V (! $stop_condition_SMV_ft$))",
            "ftInfBtwExpanded": "(explainSuitable V (! mission))",
            "ftFinBtwExpanded_fetched": "(($post_condition_SMV_ft$ | LAST) V (! $stop_condition_SMV_ft$))",
            "ftFinBtwExpanded": "((explainSuitable | LAST) V (! mission))",
            "CoCoSpecCode_fetched": "(H($stop_condition_coco$ => (( not FTP) and (YtoPre(O($post_condition_coco$))))))",
            "CoCoSpecCode": "(H(mission => (( not FTP) and (YtoPre(O(explainSuitable))))))",
            "component": "Robot"
        },
        "_id": "23a10810-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.028",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "Explanation should provide location and whether task is completed at location ",
        "comments": "",
        "fulltext": "Explanation shall satisfy robotLocation & taskCompletionStatus",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "null",
            "timing": "null",
            "response": "satisfaction",
            "variables": [
                "robotLocation",
                "taskCompletionStatus"
            ],
            "component_name": "Explanation",
            "componentTextRange": [
                0,
                10
            ],
            "post_condition": "(robotLocation & taskCompletionStatus)",
            "responseTextRange": [
                18,
                61
            ],
            "diagramVariables": "Response = <b><i>(robotLocation & taskCompletionStatus)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at some time point between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_null_null_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "post_condition_unexp_pt": "(robotLocation & taskCompletionStatus)",
            "post_condition_unexp_ft": "(robotLocation & taskCompletionStatus)",
            "post_condition_SMV_pt": "(robotLocation & taskCompletionStatus)",
            "post_condition_SMV_ft": "(robotLocation & taskCompletionStatus)",
            "post_condition_coco_smv": "(robotLocation & taskCompletionStatus)",
            "post_condition_coco": "(robotLocation and taskCompletionStatus)",
            "ft_fetched": "((! LAST) U $post_condition_unexp_ft$)",
            "ft": "((! LAST) U (robotLocation & taskCompletionStatus))",
            "pt_fetched": "(O $post_condition_unexp_pt$)",
            "pt": "(O (robotLocation & taskCompletionStatus))",
            "ptExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptExpanded": "(O (robotLocation & taskCompletionStatus))",
            "ptFinBtwExpanded_fetched": "(O $post_condition_SMV_pt$)",
            "ptFinBtwExpanded": "(O (robotLocation & taskCompletionStatus))",
            "ftExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftExpanded": "((! LAST) U (robotLocation & taskCompletionStatus))",
            "ftInfAUExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfAUExpanded": "(F (robotLocation & taskCompletionStatus))",
            "ftInfBtwExpanded_fetched": "(F $post_condition_SMV_ft$)",
            "ftInfBtwExpanded": "(F (robotLocation & taskCompletionStatus))",
            "ftFinBtwExpanded_fetched": "((! LAST) U $post_condition_SMV_ft$)",
            "ftFinBtwExpanded": "((! LAST) U (robotLocation & taskCompletionStatus))",
            "CoCoSpecCode_fetched": "(O($post_condition_coco$))",
            "CoCoSpecCode": "(O((robotLocation and taskCompletionStatus)))",
            "component": "Explanation"
        },
        "_id": "23a10811-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.022",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "R2.02",
        "comments": "",
        "fulltext": "if safetyConcernDetected Robot shall at the next timepoint satisfy justifyDecision",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "safetyConcernDetected",
                "justifyDecision"
            ],
            "qualifier_word": "if",
            "pre_condition": "(safetyConcernDetected)",
            "regular_condition": "(safetyConcernDetected)",
            "conditionTextRange": [
                0,
                23
            ],
            "component_name": "Robot",
            "componentTextRange": [
                25,
                29
            ],
            "timingTextRange": [
                37,
                57
            ],
            "post_condition": "(justifyDecision)",
            "responseTextRange": [
                59,
                81
            ],
            "diagramVariables": "TC = <b><i>(safetyConcernDetected)</i></b>, Response = <b><i>(justifyDecision)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(safetyConcernDetected)</i></b> is true and any point in the interval where <b><i>(safetyConcernDetected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "safetyConcernDetected",
            "regular_condition_unexp_ft": "safetyConcernDetected",
            "regular_condition_SMV_pt": "safetyConcernDetected",
            "regular_condition_SMV_ft": "safetyConcernDetected",
            "regular_condition_coco_smv": "safetyConcernDetected",
            "regular_condition_coco": "safetyConcernDetected",
            "post_condition_unexp_pt": "justifyDecision",
            "post_condition_unexp_ft": "justifyDecision",
            "post_condition_SMV_pt": "justifyDecision",
            "post_condition_SMV_ft": "justifyDecision",
            "post_condition_coco_smv": "justifyDecision",
            "post_condition_coco": "justifyDecision",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
            "ft": "((LAST V (((! safetyConcernDetected) & ((! LAST) & (X safetyConcernDetected))) -> (X (LAST | (X justifyDecision))))) & (safetyConcernDetected -> (LAST | (X justifyDecision))))",
            "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
            "pt": "(H ((Y (safetyConcernDetected & ((Y (! safetyConcernDetected)) | FTP))) -> (justifyDecision | FTP)))",
            "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
            "ptExpanded": "(H ((Y (safetyConcernDetected & ((Y (! safetyConcernDetected)) | (! (Y TRUE))))) -> (justifyDecision | (! (Y TRUE)))))",
            "ptFinBtwExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
            "ptFinBtwExpanded": "(H ((Y (safetyConcernDetected & ((Y (! safetyConcernDetected)) | (! (Y TRUE))))) -> (justifyDecision | (! (Y TRUE)))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V (((! safetyConcernDetected) & ((! LAST) & (X safetyConcernDetected))) -> (X (LAST | (X justifyDecision))))) & (safetyConcernDetected -> (LAST | (X justifyDecision))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! safetyConcernDetected) & (X safetyConcernDetected)) -> (X (X justifyDecision)))) & (safetyConcernDetected -> (X justifyDecision)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! safetyConcernDetected) & (X safetyConcernDetected)) -> (X (X justifyDecision)))) & (safetyConcernDetected -> (X justifyDecision)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V (((! safetyConcernDetected) & ((! LAST) & (X safetyConcernDetected))) -> (X (LAST | (X justifyDecision))))) & (safetyConcernDetected -> (LAST | (X justifyDecision))))",
            "CoCoSpecCode_fetched": "(H((YtoPre($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP))) => ($post_condition_coco$ or FTP)))",
            "CoCoSpecCode": "(H((YtoPre(safetyConcernDetected and ((YtoPre( not safetyConcernDetected)) or FTP))) => (justifyDecision or FTP)))",
            "component": "Robot"
        },
        "_id": "23a10812-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.029",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "Explain path robot is planning to take and why it is the optimal choice ",
        "comments": "",
        "fulltext": "in pathPlanning mode Robot shall always satisfy explainPath & justifyDecision",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "pathPlanning",
                "explainPath",
                "justifyDecision"
            ],
            "scope_mode": "pathPlanning",
            "scopeTextRange": [
                0,
                19
            ],
            "component_name": "Robot",
            "componentTextRange": [
                21,
                25
            ],
            "timingTextRange": [
                33,
                38
            ],
            "post_condition": "(explainPath & justifyDecision)",
            "responseTextRange": [
                40,
                76
            ],
            "diagramVariables": "M = <b><i>pathPlanning</i></b>,, Response = <b><i>(explainPath & justifyDecision)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>pathPlanning</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "pathPlanning",
            "scope_mode_coco": "pathPlanning",
            "scope_mode_ft": "pathPlanning",
            "post_condition_unexp_pt": "(explainPath & justifyDecision)",
            "post_condition_unexp_ft": "(explainPath & justifyDecision)",
            "post_condition_SMV_pt": "(explainPath & justifyDecision)",
            "post_condition_SMV_ft": "(explainPath & justifyDecision)",
            "post_condition_coco_smv": "(explainPath & justifyDecision)",
            "post_condition_coco": "(explainPath and justifyDecision)",
            "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V (pathPlanning -> (explainPath & justifyDecision)))",
            "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H (pathPlanning -> (explainPath & justifyDecision)))",
            "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H (pathPlanning -> (explainPath & justifyDecision)))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ($post_condition_SMV_pt$ S ($post_condition_SMV_pt$ & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! pathPlanning) & (Y pathPlanning)) -> (Y ((explainPath & justifyDecision) S ((explainPath & justifyDecision) & (pathPlanning & ((! (Y TRUE)) | (Y (! pathPlanning)))))))))",
            "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "(LAST V (pathPlanning -> (explainPath & justifyDecision)))",
            "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G (pathPlanning -> (explainPath & justifyDecision)))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! pathPlanning) ) & (X pathPlanning))) | (X ((F ((pathPlanning ) & (X (! pathPlanning)))) -> (((pathPlanning ) & (X (! pathPlanning))) V (explainPath & justifyDecision)))))) & (pathPlanning -> ((F ((pathPlanning ) & (X (! pathPlanning)))) -> (((pathPlanning ) & (X (! pathPlanning))) V (explainPath & justifyDecision)))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! pathPlanning) & (! LAST)) & (X pathPlanning)) & (! LAST))) | (X (((! LAST) U ((pathPlanning & (! LAST)) & (X (! pathPlanning)))) -> (((pathPlanning & (! LAST)) & (X (! pathPlanning))) V (explainPath & justifyDecision)))))) & (pathPlanning -> (((! LAST) U ((pathPlanning & (! LAST)) & (X (! pathPlanning)))) -> (((pathPlanning & (! LAST)) & (X (! pathPlanning))) V (explainPath & justifyDecision)))))",
            "CoCoSpecCode_fetched": "(H($scope_mode_coco$ => $post_condition_coco$))",
            "CoCoSpecCode": "(H(pathPlanning => (explainPath and justifyDecision)))",
            "component": "Robot"
        },
        "_id": "23a10813-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.041",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "R2.03 ``At that point [safety concern] you'd want to verify why it thought it was doing the things it did\"",
        "comments": "",
        "fulltext": "if safetyConcernDetected Robot shall at the next timepoint satisfy verifyAction",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "safetyConcernDetected",
                "verifyAction"
            ],
            "qualifier_word": "if",
            "pre_condition": "(safetyConcernDetected)",
            "regular_condition": "(safetyConcernDetected)",
            "conditionTextRange": [
                0,
                23
            ],
            "component_name": "Robot",
            "componentTextRange": [
                25,
                29
            ],
            "timingTextRange": [
                37,
                57
            ],
            "post_condition": "(verifyAction)",
            "responseTextRange": [
                59,
                78
            ],
            "diagramVariables": "TC = <b><i>(safetyConcernDetected)</i></b>, Response = <b><i>(verifyAction)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(safetyConcernDetected)</i></b> is true and any point in the interval where <b><i>(safetyConcernDetected)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "safetyConcernDetected",
            "regular_condition_unexp_ft": "safetyConcernDetected",
            "regular_condition_SMV_pt": "safetyConcernDetected",
            "regular_condition_SMV_ft": "safetyConcernDetected",
            "regular_condition_coco_smv": "safetyConcernDetected",
            "regular_condition_coco": "safetyConcernDetected",
            "post_condition_unexp_pt": "verifyAction",
            "post_condition_unexp_ft": "verifyAction",
            "post_condition_SMV_pt": "verifyAction",
            "post_condition_SMV_ft": "verifyAction",
            "post_condition_coco_smv": "verifyAction",
            "post_condition_coco": "verifyAction",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
            "ft": "((LAST V (((! safetyConcernDetected) & ((! LAST) & (X safetyConcernDetected))) -> (X (LAST | (X verifyAction))))) & (safetyConcernDetected -> (LAST | (X verifyAction))))",
            "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
            "pt": "(H ((Y (safetyConcernDetected & ((Y (! safetyConcernDetected)) | FTP))) -> (verifyAction | FTP)))",
            "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
            "ptExpanded": "(H ((Y (safetyConcernDetected & ((Y (! safetyConcernDetected)) | (! (Y TRUE))))) -> (verifyAction | (! (Y TRUE)))))",
            "ptFinBtwExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
            "ptFinBtwExpanded": "(H ((Y (safetyConcernDetected & ((Y (! safetyConcernDetected)) | (! (Y TRUE))))) -> (verifyAction | (! (Y TRUE)))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V (((! safetyConcernDetected) & ((! LAST) & (X safetyConcernDetected))) -> (X (LAST | (X verifyAction))))) & (safetyConcernDetected -> (LAST | (X verifyAction))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! safetyConcernDetected) & (X safetyConcernDetected)) -> (X (X verifyAction)))) & (safetyConcernDetected -> (X verifyAction)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! safetyConcernDetected) & (X safetyConcernDetected)) -> (X (X verifyAction)))) & (safetyConcernDetected -> (X verifyAction)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V (((! safetyConcernDetected) & ((! LAST) & (X safetyConcernDetected))) -> (X (LAST | (X verifyAction))))) & (safetyConcernDetected -> (LAST | (X verifyAction))))",
            "CoCoSpecCode_fetched": "(H((YtoPre($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP))) => ($post_condition_coco$ or FTP)))",
            "CoCoSpecCode": "(H((YtoPre(safetyConcernDetected and ((YtoPre( not safetyConcernDetected)) or FTP))) => (verifyAction or FTP)))",
            "component": "Robot"
        },
        "_id": "23a10814-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.008",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "When path planning, the robot should explain its path choice ",
        "comments": "",
        "fulltext": "in pathPlanningMode Robot shall always satisfy justifyDecision",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "in"
            },
            "condition": "null",
            "timing": "always",
            "response": "satisfaction",
            "variables": [
                "pathPlanningMode",
                "justifyDecision"
            ],
            "scope_mode": "pathPlanningMode",
            "scopeTextRange": [
                0,
                18
            ],
            "component_name": "Robot",
            "componentTextRange": [
                20,
                24
            ],
            "timingTextRange": [
                32,
                37
            ],
            "post_condition": "(justifyDecision)",
            "responseTextRange": [
                39,
                61
            ],
            "diagramVariables": "M = <b><i>pathPlanningMode</i></b>,, Response = <b><i>(justifyDecision)</i></b>.",
            "description": "ENFORCED: in every interval where <b><i>pathPlanningMode</i></b> holds.\nTRIGGER: first point in the interval.\nREQUIRES: for every trigger, RES must hold at all time points between (and including) the trigger and the end of the interval.",
            "diagram": "_media/user-interface/examples/svgDiagrams/in_null_always_satisfaction.svg",
            "scope_mode_pt": "pathPlanningMode",
            "scope_mode_coco": "pathPlanningMode",
            "scope_mode_ft": "pathPlanningMode",
            "post_condition_unexp_pt": "justifyDecision",
            "post_condition_unexp_ft": "justifyDecision",
            "post_condition_SMV_pt": "justifyDecision",
            "post_condition_SMV_ft": "justifyDecision",
            "post_condition_coco_smv": "justifyDecision",
            "post_condition_coco": "justifyDecision",
            "ft_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_unexp_ft$))",
            "ft": "(LAST V (pathPlanningMode -> justifyDecision))",
            "pt_fetched": "(H ($scope_mode_pt$ -> $post_condition_unexp_pt$))",
            "pt": "(H (pathPlanningMode -> justifyDecision))",
            "ptExpanded_fetched": "(H ($scope_mode_pt$ -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H (pathPlanningMode -> justifyDecision))",
            "ptFinBtwExpanded_fetched": "(H (((! $scope_mode_pt$) & (Y $scope_mode_pt$)) -> (Y ($post_condition_SMV_pt$ S ($post_condition_SMV_pt$ & ($scope_mode_pt$ & ((! (Y TRUE)) | (Y (! $scope_mode_pt$)))))))))",
            "ptFinBtwExpanded": "(H (((! pathPlanningMode) & (Y pathPlanningMode)) -> (Y (justifyDecision S (justifyDecision & (pathPlanningMode & ((! (Y TRUE)) | (Y (! pathPlanningMode)))))))))",
            "ftExpanded_fetched": "(LAST V ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "(LAST V (pathPlanningMode -> justifyDecision))",
            "ftInfAUExpanded_fetched": "(G ($scope_mode_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "(G (pathPlanningMode -> justifyDecision))",
            "ftInfBtwExpanded_fetched": "((G ((! (((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$))) | (X ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> ((F (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))",
            "ftInfBtwExpanded": "((G ((! (((! pathPlanningMode) ) & (X pathPlanningMode))) | (X ((F ((pathPlanningMode ) & (X (! pathPlanningMode)))) -> (((pathPlanningMode ) & (X (! pathPlanningMode))) V justifyDecision))))) & (pathPlanningMode -> ((F ((pathPlanningMode ) & (X (! pathPlanningMode)))) -> (((pathPlanningMode ) & (X (! pathPlanningMode))) V justifyDecision))))",
            "ftFinBtwExpanded_fetched": "((LAST V ((! ((((! $scope_mode_ft$) & (! LAST)) & (X $scope_mode_ft$)) & (! LAST))) | (X (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))) & ($scope_mode_ft$ -> (((! LAST) U (($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$)))) -> ((($scope_mode_ft$ & (! LAST)) & (X (! $scope_mode_ft$))) V $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V ((! ((((! pathPlanningMode) & (! LAST)) & (X pathPlanningMode)) & (! LAST))) | (X (((! LAST) U ((pathPlanningMode & (! LAST)) & (X (! pathPlanningMode)))) -> (((pathPlanningMode & (! LAST)) & (X (! pathPlanningMode))) V justifyDecision))))) & (pathPlanningMode -> (((! LAST) U ((pathPlanningMode & (! LAST)) & (X (! pathPlanningMode)))) -> (((pathPlanningMode & (! LAST)) & (X (! pathPlanningMode))) V justifyDecision))))",
            "CoCoSpecCode_fetched": "(H($scope_mode_coco$ => $post_condition_coco$))",
            "CoCoSpecCode": "(H(pathPlanningMode => justifyDecision))",
            "component": "Robot"
        },
        "_id": "23a10815-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.042",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "R3.01 I would like the ability, if I request it, to be able to understand why has it chosen that route, what's the reason behind why its chosen that route as opposed to any other valid route. ",
        "comments": "",
        "fulltext": "if routeChange & infoRequest Robot shall at the next timepoint satisfy provideReason",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "next",
            "response": "satisfaction",
            "variables": [
                "routeChange",
                "infoRequest",
                "provideReason"
            ],
            "qualifier_word": "if",
            "pre_condition": "(routeChange & infoRequest)",
            "regular_condition": "(routeChange & infoRequest)",
            "conditionTextRange": [
                0,
                27
            ],
            "component_name": "Robot",
            "componentTextRange": [
                29,
                33
            ],
            "timingTextRange": [
                41,
                61
            ],
            "post_condition": "(provideReason)",
            "responseTextRange": [
                63,
                83
            ],
            "diagramVariables": "TC = <b><i>(routeChange & infoRequest)</i></b>, Response = <b><i>(provideReason)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(routeChange & infoRequest)</i></b> is true and any point in the interval where <b><i>(routeChange & infoRequest)</i></b> becomes true (from false).\nREQUIRES: for every trigger, RES must hold at the next time step.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_next_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "(routeChange & infoRequest)",
            "regular_condition_unexp_ft": "(routeChange & infoRequest)",
            "regular_condition_SMV_pt": "(routeChange & infoRequest)",
            "regular_condition_SMV_ft": "(routeChange & infoRequest)",
            "regular_condition_coco_smv": "(routeChange & infoRequest)",
            "regular_condition_coco": "(routeChange and infoRequest)",
            "post_condition_unexp_pt": "provideReason",
            "post_condition_unexp_ft": "provideReason",
            "post_condition_SMV_pt": "provideReason",
            "post_condition_SMV_ft": "provideReason",
            "post_condition_coco_smv": "provideReason",
            "post_condition_coco": "provideReason",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X (LAST | (X $post_condition_unexp_ft$))))) & ($regular_condition_unexp_ft$ -> (LAST | (X $post_condition_unexp_ft$))))",
            "ft": "((LAST V (((! (routeChange & infoRequest)) & ((! LAST) & (X (routeChange & infoRequest)))) -> (X (LAST | (X provideReason))))) & ((routeChange & infoRequest) -> (LAST | (X provideReason))))",
            "pt_fetched": "(H ((Y ($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP))) -> ($post_condition_unexp_pt$ | FTP)))",
            "pt": "(H ((Y ((routeChange & infoRequest) & ((Y (! (routeChange & infoRequest))) | FTP))) -> (provideReason | FTP)))",
            "ptExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
            "ptExpanded": "(H ((Y ((routeChange & infoRequest) & ((Y (! (routeChange & infoRequest))) | (! (Y TRUE))))) -> (provideReason | (! (Y TRUE)))))",
            "ptFinBtwExpanded_fetched": "(H ((Y ($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE))))) -> ($post_condition_SMV_pt$ | (! (Y TRUE)))))",
            "ptFinBtwExpanded": "(H ((Y ((routeChange & infoRequest) & ((Y (! (routeChange & infoRequest))) | (! (Y TRUE))))) -> (provideReason | (! (Y TRUE)))))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
            "ftExpanded": "((LAST V (((! (routeChange & infoRequest)) & ((! LAST) & (X (routeChange & infoRequest)))) -> (X (LAST | (X provideReason))))) & ((routeChange & infoRequest) -> (LAST | (X provideReason))))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
            "ftInfAUExpanded": "((G (((! (routeChange & infoRequest)) & (X (routeChange & infoRequest))) -> (X (X provideReason)))) & ((routeChange & infoRequest) -> (X provideReason)))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X (X $post_condition_SMV_ft$)))) & ($regular_condition_SMV_ft$ -> (X $post_condition_SMV_ft$)))",
            "ftInfBtwExpanded": "((G (((! (routeChange & infoRequest)) & (X (routeChange & infoRequest))) -> (X (X provideReason)))) & ((routeChange & infoRequest) -> (X provideReason)))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X (LAST | (X $post_condition_SMV_ft$))))) & ($regular_condition_SMV_ft$ -> (LAST | (X $post_condition_SMV_ft$))))",
            "ftFinBtwExpanded": "((LAST V (((! (routeChange & infoRequest)) & ((! LAST) & (X (routeChange & infoRequest)))) -> (X (LAST | (X provideReason))))) & ((routeChange & infoRequest) -> (LAST | (X provideReason))))",
            "CoCoSpecCode_fetched": "(H((YtoPre($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP))) => ($post_condition_coco$ or FTP)))",
            "CoCoSpecCode": "(H((YtoPre((routeChange and infoRequest) and ((YtoPre( not (routeChange and infoRequest))) or FTP))) => (provideReason or FTP)))",
            "component": "Robot"
        },
        "_id": "23a10816-c414-11ee-890d-21443a886b6b"
    },
    {
        "reqid": "R.030",
        "parent_reqid": "",
        "project": "Explainability Requirements",
        "rationale": "If task is unable to be completed, explain why",
        "comments": "",
        "fulltext": "if taskCannotComplete Robot shall immediately satisfy explain",
        "semantics": {
            "type": "nasa",
            "scope": {
                "type": "null"
            },
            "condition": "regular",
            "timing": "immediately",
            "response": "satisfaction",
            "variables": [
                "taskCannotComplete",
                "explain"
            ],
            "qualifier_word": "if",
            "pre_condition": "(taskCannotComplete)",
            "regular_condition": "(taskCannotComplete)",
            "conditionTextRange": [
                0,
                20
            ],
            "component_name": "Robot",
            "componentTextRange": [
                22,
                26
            ],
            "timingTextRange": [
                34,
                44
            ],
            "post_condition": "(explain)",
            "responseTextRange": [
                46,
                60
            ],
            "diagramVariables": "TC = <b><i>(taskCannotComplete)</i></b>, Response = <b><i>(explain)</i></b>.",
            "description": "ENFORCED: in the interval defined by the entire execution.\nTRIGGER: first point in the interval if <b><i>(taskCannotComplete)</i></b> is true and any point in the interval where <b><i>(taskCannotComplete)</i></b> becomes true (from false).\nREQUIRES: for every trigger, if trigger holds then RES also holds at the same time point.",
            "diagram": "_media/user-interface/examples/svgDiagrams/null_regular_immediately_satisfaction.svg",
            "scope_mode_pt": "BAD_PT",
            "scope_mode_coco": "BAD_COCO",
            "scope_mode_ft": "BAD_FT",
            "regular_condition_unexp_pt": "taskCannotComplete",
            "regular_condition_unexp_ft": "taskCannotComplete",
            "regular_condition_SMV_pt": "taskCannotComplete",
            "regular_condition_SMV_ft": "taskCannotComplete",
            "regular_condition_coco_smv": "taskCannotComplete",
            "regular_condition_coco": "taskCannotComplete",
            "post_condition_unexp_pt": "explain",
            "post_condition_unexp_ft": "explain",
            "post_condition_SMV_pt": "explain",
            "post_condition_SMV_ft": "explain",
            "post_condition_coco_smv": "explain",
            "post_condition_coco": "explain",
            "ft_fetched": "((LAST V (((! $regular_condition_unexp_ft$) & ((! LAST) & (X $regular_condition_unexp_ft$))) -> (X $post_condition_unexp_ft$))) & ($regular_condition_unexp_ft$ -> $post_condition_unexp_ft$))",
            "ft": "((LAST V (((! taskCannotComplete) & ((! LAST) & (X taskCannotComplete))) -> (X explain))) & (taskCannotComplete -> explain))",
            "pt_fetched": "(H (($regular_condition_unexp_pt$ & ((Y (! $regular_condition_unexp_pt$)) | FTP)) -> $post_condition_unexp_pt$))",
            "pt": "(H ((taskCannotComplete & ((Y (! taskCannotComplete)) | FTP)) -> explain))",
            "ptExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptExpanded": "(H ((taskCannotComplete & ((Y (! taskCannotComplete)) | (! (Y TRUE)))) -> explain))",
            "ptFinBtwExpanded_fetched": "(H (($regular_condition_SMV_pt$ & ((Y (! $regular_condition_SMV_pt$)) | (! (Y TRUE)))) -> $post_condition_SMV_pt$))",
            "ptFinBtwExpanded": "(H ((taskCannotComplete & ((Y (! taskCannotComplete)) | (! (Y TRUE)))) -> explain))",
            "ftExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftExpanded": "((LAST V (((! taskCannotComplete) & ((! LAST) & (X taskCannotComplete))) -> (X explain))) & (taskCannotComplete -> explain))",
            "ftInfAUExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfAUExpanded": "((G (((! taskCannotComplete) & (X taskCannotComplete)) -> (X explain))) & (taskCannotComplete -> explain))",
            "ftInfBtwExpanded_fetched": "((G (((! $regular_condition_SMV_ft$) & (X $regular_condition_SMV_ft$)) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftInfBtwExpanded": "((G (((! taskCannotComplete) & (X taskCannotComplete)) -> (X explain))) & (taskCannotComplete -> explain))",
            "ftFinBtwExpanded_fetched": "((LAST V (((! $regular_condition_SMV_ft$) & ((! LAST) & (X $regular_condition_SMV_ft$))) -> (X $post_condition_SMV_ft$))) & ($regular_condition_SMV_ft$ -> $post_condition_SMV_ft$))",
            "ftFinBtwExpanded": "((LAST V (((! taskCannotComplete) & ((! LAST) & (X taskCannotComplete))) -> (X explain))) & (taskCannotComplete -> explain))",
            "CoCoSpecCode_fetched": "(H(($regular_condition_coco$ and ((YtoPre( not $regular_condition_coco$)) or FTP)) => $post_condition_coco$))",
            "CoCoSpecCode": "(H((taskCannotComplete and ((YtoPre( not taskCannotComplete)) or FTP)) => explain))",
            "component": "Robot"
        },
        "_id": "23a10817-c414-11ee-890d-21443a886b6b"
    }
]